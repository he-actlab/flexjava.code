Buildfile: /Users/jspark/projects/expax/apps/smm-enerj/build.xml

clean:
   [delete] Deleting directory /Users/jspark/projects/expax/apps/smm-enerj/build

build:
    [mkdir] Created dir: /Users/jspark/projects/expax/apps/smm-enerj/build
   [enerjc] /Users/jspark/projects/expax/apps/smm-enerj/build.xml:49: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
   [enerjc] Compiling 5 source files to /Users/jspark/projects/expax/apps/smm-enerj/build
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax/apps/smm-enerj/src/jnt/scimark2/Constants.java]]
   [enerjc] [parsing completed 15ms]
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax/apps/smm-enerj/src/jnt/scimark2/Random.java]]
   [enerjc] [parsing completed 8ms]
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax/apps/smm-enerj/src/jnt/scimark2/SparseCompRow.java]]
   [enerjc] [parsing completed 1ms]
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax/apps/smm-enerj/src/jnt/scimark2/commandline.java]]
   [enerjc] [parsing completed 2ms]
   [enerjc] [parsing started RegularFileObject[/Users/jspark/projects/expax/apps/smm-enerj/src/jnt/scimark2/kernel.java]]
   [enerjc] [parsing completed 3ms]
   [enerjc] [search path for source files: /Users/jspark/projects/expax/apps/smm-enerj/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax/apps/smm-enerj/build,/Users/jspark/projects/expax/ant/lib/ant-launcher.jar,/Users/jspark/projects/expax/ant/lib/ant-antlr.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bcel.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bsf.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-log4j.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-oro.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-regexp.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-resolver.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-xalan2.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-logging.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-net.jar,/Users/jspark/projects/expax/ant/lib/ant-jai.jar,/Users/jspark/projects/expax/ant/lib/ant-javamail.jar,/Users/jspark/projects/expax/ant/lib/ant-jdepend.jar,/Users/jspark/projects/expax/ant/lib/ant-jmf.jar,/Users/jspark/projects/expax/ant/lib/ant-jsch.jar,/Users/jspark/projects/expax/ant/lib/ant-junit.jar,/Users/jspark/projects/expax/ant/lib/ant-junit4.jar,/Users/jspark/projects/expax/ant/lib/ant-netrexx.jar,/Users/jspark/projects/expax/ant/lib/ant-swing.jar,/Users/jspark/projects/expax/ant/lib/ant-testutil.jar,/Users/jspark/projects/expax/ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Approx.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(java/lang/annotation/ElementType.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/SubtypeOf.class)]]
   [enerjc] Round 1:
   [enerjc] 	input files: {jnt.scimark2.Constants, jnt.scimark2.Random, jnt.scimark2.SparseCompRow, jnt.scimark2.commandline, jnt.scimark2.kernel}
   [enerjc] 	annotations: []
   [enerjc] 	last round: false
   [enerjc] Processor enerj.PrecisionChecker matches [] and returns false.
   [enerjc] [search path for source files: /Users/jspark/projects/expax/apps/smm-enerj/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax/apps/smm-enerj/build,/Users/jspark/projects/expax/ant/lib/ant-launcher.jar,/Users/jspark/projects/expax/ant/lib/ant-antlr.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bcel.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bsf.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-log4j.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-oro.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-regexp.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-resolver.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-xalan2.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-logging.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-net.jar,/Users/jspark/projects/expax/ant/lib/ant-jai.jar,/Users/jspark/projects/expax/ant/lib/ant-javamail.jar,/Users/jspark/projects/expax/ant/lib/ant-jdepend.jar,/Users/jspark/projects/expax/ant/lib/ant-jmf.jar,/Users/jspark/projects/expax/ant/lib/ant-jsch.jar,/Users/jspark/projects/expax/ant/lib/ant-junit.jar,/Users/jspark/projects/expax/ant/lib/ant-junit4.jar,/Users/jspark/projects/expax/ant/lib/ant-netrexx.jar,/Users/jspark/projects/expax/ant/lib/ant-swing.jar,/Users/jspark/projects/expax/ant/lib/ant-testutil.jar,/Users/jspark/projects/expax/ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Approx.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(java/lang/annotation/ElementType.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/SubtypeOf.class)]]
   [enerjc] Round 2:
   [enerjc] 	input files: {}
   [enerjc] 	annotations: []
   [enerjc] 	last round: true
   [enerjc] [search path for source files: /Users/jspark/projects/expax/apps/smm-enerj/src]
   [enerjc] [search path for class files: /Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/resources.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/rt.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/sunrsasign.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jsse.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jce.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/charsets.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/jfr.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/JObjC.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/classes,../../checker-runtime/build/cfrt.jar,../../enerj/build/enerj.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/dnsns.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/localedata.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunec.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/jre/lib/ext/zipfs.jar,/System/Library/Java/Extensions/MRJToolkit.jar,/System/Library/Java/Extensions/QTJava.zip,/Users/jspark/projects/expax/apps/smm-enerj/build,/Users/jspark/projects/expax/ant/lib/ant-launcher.jar,/Users/jspark/projects/expax/ant/lib/ant-antlr.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bcel.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-bsf.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-log4j.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-oro.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-regexp.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-resolver.jar,/Users/jspark/projects/expax/ant/lib/ant-apache-xalan2.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-logging.jar,/Users/jspark/projects/expax/ant/lib/ant-commons-net.jar,/Users/jspark/projects/expax/ant/lib/ant-jai.jar,/Users/jspark/projects/expax/ant/lib/ant-javamail.jar,/Users/jspark/projects/expax/ant/lib/ant-jdepend.jar,/Users/jspark/projects/expax/ant/lib/ant-jmf.jar,/Users/jspark/projects/expax/ant/lib/ant-jsch.jar,/Users/jspark/projects/expax/ant/lib/ant-junit.jar,/Users/jspark/projects/expax/ant/lib/ant-junit4.jar,/Users/jspark/projects/expax/ant/lib/ant-netrexx.jar,/Users/jspark/projects/expax/ant/lib/ant-swing.jar,/Users/jspark/projects/expax/ant/lib/ant-testutil.jar,/Users/jspark/projects/expax/ant/lib/ant.jar,/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/tools.jar]
   [enerjc] *** EXPAX_PC: value = mbstatic,simulation,/Users/jspark/projects/expax/apps/smm-enerj/analysis.flag,/Users/jspark/projects/expax/apps/smm-enerj/smm-bc-offset.info,/Users/jspark/projects/expax/apps/smm-enerj/analysis.result
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] *** EXPAX_RPT: ENERJ
   [enerjc] *** EXPAX_RPT: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = jnt.scimark2.Constants
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitSelect: tree = jnt.scimark2
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: visitIdent: tree = jnt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: lvalues contains = jnt.scimark2
   [enerjc] *** EXPAX_PRT: class name is changed to = jnt.scimark2.Constants
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final double RESOLUTION_DEFAULT = 2.0
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 2.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DOUBLE_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static double RESOLUTION_DEFAULT = 2.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int RANDOM_SEED = 101010
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = RANDOM_SEED
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 101010
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int RANDOM_SEED = 101010
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int FFT_SIZE = 1024
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = FFT_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1024
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int FFT_SIZE = 1024
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int SOR_SIZE = 100
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = SOR_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 100
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int SOR_SIZE = 100
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int SPARSE_SIZE_M = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = SPARSE_SIZE_M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int SPARSE_SIZE_M = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int SPARSE_SIZE_nz = 5000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = SPARSE_SIZE_nz
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 5000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int SPARSE_SIZE_nz = 5000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LU_SIZE = 100
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Object.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/String.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: name = LU_SIZE
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Approx.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 100
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Annotation.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Retention.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/RetentionPolicy.class)]]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/annotation/Target.class)]]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(java/lang/annotation/ElementType.class)]]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/SubtypeOf.class)]]
   [enerjc] *** EXPAX_PRT: approx is false = public static int LU_SIZE = 100
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Precise.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LG_FFT_SIZE = 1048576
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Top.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/ImplicitFor.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: name = LG_FFT_SIZE
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Context.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1048576
   [enerjc] java.io.FileNotFoundException: /Users/jspark/projects/expax/apps/smm-enerj/analysis.flag (No such file or directory)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] 	at java.io.FileInputStream.open(Native Method)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] 	at java.io.FileInputStream.<init>(FileInputStream.java:146)
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] 	at java.io.FileInputStream.<init>(FileInputStream.java:101)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] 	at java.io.FileReader.<init>(FileReader.java:58)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] 	at enerj.PrecisionChecker.readExpaxOptions(Unknown Source)
   [enerjc] *** EXPAX_PRT: approx is false = public static int LG_FFT_SIZE = 1048576
   [enerjc] 	at enerj.PrecisionChecker.initChecker(Unknown Source)
   [enerjc] 	at checkers.source.SourceChecker.init(SourceChecker.java:287)
   [enerjc] 	at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:857)
   [enerjc] 	at com.sun.tools.javac.main.Main.compile(Main.java:441)
   [enerjc] 	at com.sun.tools.javac.main.Main.compile(Main.java:358)
   [enerjc] 	at com.sun.tools.javac.main.Main.compile(Main.java:347)
   [enerjc] 	at com.sun.tools.javac.main.Main.compile(Main.java:338)
   [enerjc] 	at com.sun.tools.javac.Main.compile(Main.java:76)
   [enerjc] 	at com.sun.tools.javac.Main.main(Main.java:61)
   [enerjc] [checking jnt.scimark2.Constants]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AutoCloseable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/PolyAll.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Users/jspark/projects/expax/checker-framework/checkers/binary/jsr308-all.jar(checkers/quals/Unqualified.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/util/Vector.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntimeRoot.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../checker-runtime/build/cfrt.jar(checkers/runtime/rt/Runtime.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Double.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$MemKind.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Number.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Integer.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LG_SOR_SIZE = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = LG_SOR_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int LG_SOR_SIZE = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LG_SPARSE_SIZE_M = 100000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = LG_SPARSE_SIZE_M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 100000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int LG_SPARSE_SIZE_M = 100000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LG_SPARSE_SIZE_nz = 1000000
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = LG_SPARSE_SIZE_nz
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1000000
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Byte.class)]]
   [enerjc] *** EXPAX_PRT: approx is false = public static int LG_SPARSE_SIZE_nz = 1000000
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Character.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int LG_LU_SIZE = 1000
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Short.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Long.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: name = LG_LU_SIZE
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Float.class)]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1000
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax/apps/smm-enerj/build/jnt/scimark2/Constants.class]]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] [checking jnt.scimark2.Random]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Math.class)]]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int LG_LU_SIZE = 1000
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_FFT_SIZE = 16
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_FFT_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 16
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_FFT_SIZE = 16
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_SOR_SIZE = 10
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_SOR_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_SOR_SIZE = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_SPARSE_SIZE_M = 10
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_SPARSE_SIZE_M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_SPARSE_SIZE_M = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_SPARSE_SIZE_N = 10
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_SPARSE_SIZE_N
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_SPARSE_SIZE_N = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_SPARSE_SIZE_nz = 50
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_SPARSE_SIZE_nz
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 50
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_SPARSE_SIZE_nz = 50
   [enerjc] *** EXPAX_ST: visitVarDef: tree = public static final int TINY_LU_SIZE = 10
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = TINY_LU_SIZE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 10
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = public static int TINY_LU_SIZE = 10
   [enerjc] *** EXPAX_GEN: class name is changed to = jnt.scimark2.Constants
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = Constants()
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = <init>
   [enerjc] *** EXPAX_GEN: flatname = <init>
   [enerjc] *** EXPAX_GEN: qname = <init>
   [enerjc] *** EXPAX_GEN: sname<init>
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to <init>()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super()
   [enerjc] *** EXPAX_GEN: visitApply = super()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 0
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Constants <init>() void 0 30 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Constants <init>() void 1 30 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 4
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Constants <init>() void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Constants <init>() void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Constants <init>() void 7 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 7
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Constants <init>() void 7 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$ArithOperator.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/PrecisionRuntime$NumberKind.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/Serializable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Boolean.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/rt/Reference.class)]]
   [enerjc] *** EXPAX_RPT: ENERJ
   [enerjc] *** EXPAX_RPT: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = jnt.scimark2.Random
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     initialize(123456);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>(double left, double right) {
   [enerjc]     super();
   [enerjc]     initialize(123456);
   [enerjc]     this.left = left;
   [enerjc]     this.right = right;
   [enerjc]     width = right - left;
   [enerjc]     haveRange = true;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>(double,double)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>(int seed) {
   [enerjc]     super();
   [enerjc]     initialize(seed);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>(int)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>(int seed, double left, double right) {
   [enerjc]     super();
   [enerjc]     initialize(seed);
   [enerjc]     this.left = left;
   [enerjc]     this.right = right;
   [enerjc]     width = right - left;
   [enerjc]     haveRange = true;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>(int,double,double)
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] public final synchronized double nextDouble() {
   [enerjc]     int k;
   [enerjc]     double nextValue;
   [enerjc]     k = m[i] - m[j];
   [enerjc]     if (k < 0) k += m1;
   [enerjc]     m[j] = k;
   [enerjc]     if (i == 0) i = 16; else i--;
   [enerjc]     if (j == 0) j = 16; else j--;
   [enerjc]     if (haveRange) return left + dm1 * k * width; else return dm1 * k;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to nextDouble()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] private void initialize(int seed) {
   [enerjc]     int jseed;
   [enerjc]     int k0;
   [enerjc]     int k1;
   [enerjc]     int j0;
   [enerjc]     int j1;
   [enerjc]     int iloop;
   [enerjc]     this.seed = seed;
   [enerjc]     m = new int[17];
   [enerjc]     jseed = Math.min(Math.abs(seed), m1);
   [enerjc]     if (jseed % 2 == 0) --jseed;
   [enerjc]     k0 = 9069 % m2;
   [enerjc]     k1 = 9069 / m2;
   [enerjc]     j0 = jseed % m2;
   [enerjc]     j1 = jseed / m2;
   [enerjc]     for (iloop = 0; iloop < 17; ++iloop) {
   [enerjc]         jseed = j0 * k0;
   [enerjc]         j1 = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2);
   [enerjc]         j0 = jseed % m2;
   [enerjc]         m[iloop] = j0 + m2 * j1;
   [enerjc]     }
   [enerjc]     i = 4;
   [enerjc]     j = 16;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to initialize(int)
   [enerjc] *** EXPAX_RPT: visitNewArray = new int[17]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_ST: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitSelect: tree = jnt.scimark2
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: visitIdent: tree = jnt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: lvalues contains = jnt.scimark2
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang.*
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.lang)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.lang)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang.*
   [enerjc] *** EXPAX_PRT: class name is changed to = jnt.scimark2.Random
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int seed = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int seed = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private int[] m
   [enerjc] *** EXPAX_ST: visitVarDef: type = int[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = m
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private int i = 4
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 4
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int i = 4
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private int j = 16
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 16
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int j = 16
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private final int mdig = 32
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = mdig
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 32
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int mdig = 32
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private final int one = 1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = one
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int one = 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private final int m1 = (one << mdig - 2) + ((one << mdig - 2) - one)
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = m1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = (one << mdig - 2) + ((one << mdig - 2) - one)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = (one << mdig - 2) + ((one << mdig - 2) - one)
   [enerjc] *** EXPAX_ST: visitBinary: tree = (one << mdig - 2) + ((one << mdig - 2) - one)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SL
   [enerjc] *** EXPAX_PRT: approx is false = one << mdig - 2
   [enerjc] *** EXPAX_ST: visitBinary: tree = one << mdig - 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_ST: visitIdent: tree = one
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = one
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = mdig - 2
   [enerjc] *** EXPAX_ST: visitBinary: tree = mdig - 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = mdig
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mdig
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = (one << mdig - 2) - one
   [enerjc] *** EXPAX_ST: visitBinary: tree = (one << mdig - 2) - one
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SL
   [enerjc] *** EXPAX_PRT: approx is false = one << mdig - 2
   [enerjc] *** EXPAX_ST: visitBinary: tree = one << mdig - 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_ST: visitIdent: tree = one
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = one
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = mdig - 2
   [enerjc] *** EXPAX_ST: visitBinary: tree = mdig - 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = mdig
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mdig
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = one
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = one
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int m1 = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()), (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp((enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private final int m2 = one << mdig / 2
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = m2
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = one << mdig / 2
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LEFT_SHIFT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SL
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SL
   [enerjc] *** EXPAX_PRT: approx is false = one << mdig / 2
   [enerjc] *** EXPAX_ST: visitBinary: tree = one << mdig / 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = SL
   [enerjc] *** EXPAX_ST: kind = LEFT_SHIFT
   [enerjc] *** EXPAX_ST: visitIdent: tree = one
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = one
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = mdig / 2
   [enerjc] *** EXPAX_ST: visitBinary: tree = mdig / 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: visitIdent: tree = mdig
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = mdig
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private int m2 = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false).intValue(), 2, enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private double dm1 = 1.0 / (double)m1
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = dm1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1.0 / (double)m1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DIVIDE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DIV
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = 1.0 / (double)m1
   [enerjc] *** EXPAX_ST: visitBinary: tree = 1.0 / (double)m1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: visitIdent: tree = m1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private double dm1 = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(1.0, (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private boolean haveRange = false
   [enerjc] *** EXPAX_ST: visitVarDef: type = boolean
   [enerjc] *** EXPAX_ST: visitVarDef: name = haveRange
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = false
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = BOOLEAN_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private boolean haveRange = false
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private double left = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = left
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DOUBLE_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private double left = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private double right = 1.0
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = right
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DOUBLE_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private double right = 1.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = private double width = 1.0
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = width
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 1.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DOUBLE_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = private double width = 1.0
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: visitIdent: tree = initialize
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>(double left, double right) {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc]     this.left = left;
   [enerjc]     this.right = right;
   [enerjc]     width = right - left;
   [enerjc]     haveRange = true;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>(double,double)
   [enerjc] *** EXPAX_PRT: createNewInitializer = double left
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double left
   [enerjc] *** EXPAX_PRT: createNewInitializer = double right
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double right
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double left
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = left
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double right
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = right
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> right__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(right, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = right__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(right, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> left__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(left, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = left__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(left, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: visitIdent: tree = initialize
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.left = left
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.left
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.left
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=this.left)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=this.left)
   [enerjc] *** EXPAX_ST: lvalues contains = this.left
   [enerjc] *** EXPAX_ST: visitIdent: tree = left
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = left
   [enerjc] *** EXPAX_ST: check oldLhs = this.left
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.right = right
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.right
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.right
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=this.right)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=this.right)
   [enerjc] *** EXPAX_ST: lvalues contains = this.right
   [enerjc] *** EXPAX_ST: visitIdent: tree = right
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = right
   [enerjc] *** EXPAX_ST: check oldLhs = this.right
   [enerjc] *** EXPAX_ST: visitAssign: tree = width = right - left
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = right - left
   [enerjc] *** EXPAX_ST: visitBinary: tree = right - left
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = right
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = right
   [enerjc] *** EXPAX_ST: visitIdent: tree = left
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = left
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = width
   [enerjc] *** EXPAX_ST: visitAssign: tree = haveRange = true
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = haveRange
   [enerjc] *** EXPAX_ST: visitIdent: tree = haveRange
   [enerjc] *** EXPAX_ST: check oldLhs = haveRange
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>(int seed) {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(seed);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>(int)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int seed
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int seed
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> seed__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: visitIdent: tree = initialize
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>(int seed, double left, double right) {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(seed);
   [enerjc]     this.left = left;
   [enerjc]     this.right = right;
   [enerjc]     width = right - left;
   [enerjc]     haveRange = true;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>(int,double,double)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int seed
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int seed
   [enerjc] *** EXPAX_PRT: createNewInitializer = double left
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double left
   [enerjc] *** EXPAX_PRT: createNewInitializer = double right
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double right
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int seed
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double left
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = left
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double right
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = right
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> right__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(right, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = right__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(right, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> left__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(left, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = left__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(left, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> seed__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: visitIdent: tree = initialize
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.left = left
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.left
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.left
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=this.left)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=this.left)
   [enerjc] *** EXPAX_ST: lvalues contains = this.left
   [enerjc] *** EXPAX_ST: visitIdent: tree = left
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = left
   [enerjc] *** EXPAX_ST: check oldLhs = this.left
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.right = right
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.right
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.right
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=this.right)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=this.right)
   [enerjc] *** EXPAX_ST: lvalues contains = this.right
   [enerjc] *** EXPAX_ST: visitIdent: tree = right
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = right
   [enerjc] *** EXPAX_ST: check oldLhs = this.right
   [enerjc] *** EXPAX_ST: visitAssign: tree = width = right - left
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = right - left
   [enerjc] *** EXPAX_ST: visitBinary: tree = right - left
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = right
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = right
   [enerjc] *** EXPAX_ST: visitIdent: tree = left
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = left
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = width
   [enerjc] *** EXPAX_ST: visitAssign: tree = haveRange = true
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = haveRange
   [enerjc] *** EXPAX_ST: visitIdent: tree = haveRange
   [enerjc] *** EXPAX_ST: check oldLhs = haveRange
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] public final synchronized double nextDouble() {
   [enerjc]     int k;
   [enerjc]     double nextValue;
   [enerjc]     k = m[i] - m[j];
   [enerjc]     if (k < 0) k += m1;
   [enerjc]     m[j] = k;
   [enerjc]     if (i == 0) i = 16; else i--;
   [enerjc]     if (j == 0) j = 16; else j--;
   [enerjc]     if (haveRange) return left + dm1 * k * width; else return dm1 * k;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to nextDouble()
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_PRT: createNewInitializer = int k
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int k
   [enerjc] *** EXPAX_PRT: createNewInitializer = double nextValue
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double nextValue
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int k
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = k
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> k__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = k__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double nextValue
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = nextValue
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> nextValue__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = nextValue__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitAssign: tree = k = m[i] - m[j]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = m[i] - m[j]
   [enerjc] *** EXPAX_ST: visitBinary: tree = m[i] - m[j]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: visitIndexed: tree = m[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=m[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = m
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = m[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=m[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = m
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = k
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = k < 0
   [enerjc] *** EXPAX_ST: visitBinary: tree = k < 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssignop: tree = k += m1
   [enerjc] *** EXPAX_ST: call isApprox - visitAssignop
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: visitIdent: tree = m1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m1
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: visitAssign: tree = m[j] = k
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = m[j]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = m[j]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=m[j])
   [enerjc] *** EXPAX_ST: visitIdent: tree = m
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false).intValue()]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = i == 0
   [enerjc] *** EXPAX_ST: visitBinary: tree = i == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = i = 16
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: check oldLhs = i
   [enerjc] *** EXPAX_ST: visitUnary: tree = i--
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #3
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = j == 0
   [enerjc] *** EXPAX_ST: visitBinary: tree = j == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = j = 16
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: check oldLhs = j
   [enerjc] *** EXPAX_ST: visitUnary: tree = j--
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #3
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = haveRange
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = haveRange
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = left + dm1 * k * width
   [enerjc] *** EXPAX_ST: visitBinary: tree = left + dm1 * k * width
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = left
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = left
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = dm1 * k * width
   [enerjc] *** EXPAX_ST: visitBinary: tree = dm1 * k * width
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = dm1 * k
   [enerjc] *** EXPAX_ST: visitBinary: tree = dm1 * k
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = dm1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = dm1
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitIdent: tree = width
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = width
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = dm1 * k
   [enerjc] *** EXPAX_ST: visitBinary: tree = dm1 * k
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = dm1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = dm1
   [enerjc] *** EXPAX_ST: visitIdent: tree = k
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] private void initialize(int seed) {
   [enerjc]     int jseed;
   [enerjc]     int k0;
   [enerjc]     int k1;
   [enerjc]     int j0;
   [enerjc]     int j1;
   [enerjc]     int iloop;
   [enerjc]     this.seed = seed;
   [enerjc]     m = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0);
   [enerjc]     jseed = Math.min(Math.abs(seed), m1);
   [enerjc]     if (jseed % 2 == 0) --jseed;
   [enerjc]     k0 = 9069 % m2;
   [enerjc]     k1 = 9069 / m2;
   [enerjc]     j0 = jseed % m2;
   [enerjc]     j1 = jseed / m2;
   [enerjc]     for (iloop = 0; iloop < 17; ++iloop) {
   [enerjc]         jseed = j0 * k0;
   [enerjc]         j1 = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2);
   [enerjc]         j0 = jseed % m2;
   [enerjc]         m[iloop] = j0 + m2 * j1;
   [enerjc]     }
   [enerjc]     i = 4;
   [enerjc]     j = 16;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to initialize(int)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int seed
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int seed
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed
   [enerjc] *** EXPAX_PRT: createNewInitializer = int jseed
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int jseed
   [enerjc] *** EXPAX_PRT: createNewInitializer = int k0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int k0
   [enerjc] *** EXPAX_PRT: createNewInitializer = int k1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int k1
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j0
   [enerjc] *** EXPAX_PRT: createNewInitializer = int j1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int j1
   [enerjc] *** EXPAX_PRT: createNewInitializer = int iloop
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int iloop
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> seed__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(seed, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int jseed
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = jseed
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> jseed__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = jseed__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int k0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = k0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> k0__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = k0__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int k1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = k1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> k1__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = k1__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j0__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j0__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int j1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = j1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> j1__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = j1__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int iloop
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = iloop
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> iloop__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = iloop__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(null, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitAssign: tree = this.seed = seed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = this.seed
   [enerjc] *** EXPAX_ST: visitSelect: tree = this.seed
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=this.seed)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=this.seed)
   [enerjc] *** EXPAX_ST: lvalues contains = this.seed
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_ST: check oldLhs = this.seed
   [enerjc] *** EXPAX_ST: visitAssign: tree = m = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m
   [enerjc] *** EXPAX_ST: visitIdent: tree = m
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: check oldLhs = m
   [enerjc] *** EXPAX_ST: visitAssign: tree = jseed = Math.min(Math.abs(seed), m1)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: visitSelect: tree = Math.min
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Math.min)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Math
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Math.min)
   [enerjc] *** EXPAX_ST: lvalues contains = Math.min
   [enerjc] *** EXPAX_ST: visitSelect: tree = Math.abs
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Math.abs)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Math
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Math.abs)
   [enerjc] *** EXPAX_ST: lvalues contains = Math.abs
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_ST: visitIdent: tree = m1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m1
   [enerjc] *** EXPAX_ST: check oldLhs = jseed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = EQ
   [enerjc] *** EXPAX_PRT: approx is false = jseed % 2 == 0
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed % 2 == 0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = EQ
   [enerjc] *** EXPAX_ST: kind = EQUAL_TO
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = jseed % 2
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed % 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = --jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitAssign: tree = k0 = 9069 % m2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k0
   [enerjc] *** EXPAX_ST: visitIdent: tree = k0
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = 9069 % m2
   [enerjc] *** EXPAX_ST: visitBinary: tree = 9069 % m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = k0
   [enerjc] *** EXPAX_ST: visitAssign: tree = k1 = 9069 / m2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k1
   [enerjc] *** EXPAX_ST: visitIdent: tree = k1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = 9069 / m2
   [enerjc] *** EXPAX_ST: visitBinary: tree = 9069 / m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = k1
   [enerjc] *** EXPAX_ST: visitAssign: tree = j0 = jseed % m2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j0
   [enerjc] *** EXPAX_ST: visitIdent: tree = j0
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = jseed % m2
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed % m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = j0
   [enerjc] *** EXPAX_ST: visitAssign: tree = j1 = jseed / m2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = jseed / m2
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed / m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = j1
   [enerjc] *** EXPAX_ST: visitAssign: tree = iloop = 0
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = iloop
   [enerjc] *** EXPAX_ST: visitIdent: tree = iloop
   [enerjc] *** EXPAX_ST: check oldLhs = iloop
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = iloop < 17
   [enerjc] *** EXPAX_ST: visitBinary: tree = iloop < 17
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: visitIdent: tree = iloop
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = iloop
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = ++iloop
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = iloop
   [enerjc] *** EXPAX_ST: visitIdent: tree = iloop
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = iloop
   [enerjc] *** EXPAX_ST: visitAssign: tree = jseed = j0 * k0
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = j0 * k0
   [enerjc] *** EXPAX_ST: visitBinary: tree = j0 * k0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = j0
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j0
   [enerjc] *** EXPAX_ST: visitIdent: tree = k0
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = jseed
   [enerjc] *** EXPAX_ST: visitAssign: tree = j1 = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j1
   [enerjc] *** EXPAX_ST: visitIdent: tree = j1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2)
   [enerjc] *** EXPAX_ST: visitBinary: tree = (jseed / m2 + j0 * k1 + j1 * k0) % (m2 / 2)
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = jseed / m2 + j0 * k1 + j1 * k0
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed / m2 + j0 * k1 + j1 * k0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = jseed / m2 + j0 * k1
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed / m2 + j0 * k1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = jseed / m2
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed / m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = j0 * k1
   [enerjc] *** EXPAX_ST: visitBinary: tree = j0 * k1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = j0
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j0
   [enerjc] *** EXPAX_ST: visitIdent: tree = k1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = j1 * k0
   [enerjc] *** EXPAX_ST: visitBinary: tree = j1 * k0
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = j1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j1
   [enerjc] *** EXPAX_ST: visitIdent: tree = k0
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = k0
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = m2 / 2
   [enerjc] *** EXPAX_ST: visitBinary: tree = m2 / 2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = j1
   [enerjc] *** EXPAX_ST: visitAssign: tree = j0 = jseed % m2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j0
   [enerjc] *** EXPAX_ST: visitIdent: tree = j0
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MOD
   [enerjc] *** EXPAX_PRT: approx is false = jseed % m2
   [enerjc] *** EXPAX_ST: visitBinary: tree = jseed % m2
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MOD
   [enerjc] *** EXPAX_ST: kind = REMAINDER
   [enerjc] *** EXPAX_ST: visitIdent: tree = jseed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = jseed
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = j0
   [enerjc] *** EXPAX_ST: visitAssign: tree = m[iloop] = j0 + m2 * j1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = m[iloop]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = m[iloop]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=m[iloop])
   [enerjc] *** EXPAX_ST: visitIdent: tree = m
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m
   [enerjc] *** EXPAX_ST: visitIdent: tree = iloop
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = iloop
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = j0 + m2 * j1
   [enerjc] *** EXPAX_ST: visitBinary: tree = j0 + m2 * j1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = j0
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j0
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = m2 * j1
   [enerjc] *** EXPAX_ST: visitBinary: tree = m2 * j1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = m2
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = m2
   [enerjc] *** EXPAX_ST: visitIdent: tree = j1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitAssign: tree = i = 4
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: check oldLhs = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = j = 16
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = j
   [enerjc] *** EXPAX_ST: visitIdent: tree = j
   [enerjc] *** EXPAX_ST: check oldLhs = j
   [enerjc] *** EXPAX_GEN: class name is changed to = jnt.scimark2.Random
   [enerjc] *** EXPAX_RPT: method name is changed to = <init>()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 15
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = Random()
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = <init>
   [enerjc] *** EXPAX_GEN: flatname = <init>
   [enerjc] *** EXPAX_GEN: qname = <init>
   [enerjc] *** EXPAX_GEN: sname<init>
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to <init>()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super()
   [enerjc] *** EXPAX_GEN: visitApply = super()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 0
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 0 1320 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 1 1320 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 4
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 5 460 IDENT
   [enerjc] *** EXPAX_AST: tree = seed
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 5 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 5 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 5 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 5 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 8 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 8 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 8
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 8 471 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 8 471 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 13
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 13 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 13 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 24 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 27 460 ASSIGN
   [enerjc] *** EXPAX_AST: tree = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 30
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 30
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 30
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 31 494 IDENT
   [enerjc] *** EXPAX_AST: tree = i
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 31 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 31 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 34 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 34 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 34
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 34 510 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 34 510 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 4
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 39
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 39 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 39 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 50 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 53 494 ASSIGN
   [enerjc] *** EXPAX_AST: tree = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 56
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 56
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 56
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 57 514 IDENT
   [enerjc] *** EXPAX_AST: tree = j
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 57 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 57 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 57 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 57 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 60 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 60 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 60
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 60 530 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 60 530 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 16
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 66
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 66 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 66 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 77 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 80 514 ASSIGN
   [enerjc] *** EXPAX_AST: tree = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 83
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = mdig
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = mdig
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Void.class)]]
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 84 536 IDENT
   [enerjc] *** EXPAX_AST: tree = mdig
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 84 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 84 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 84 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 84 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 87 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 87 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 87
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 87 561 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 87 561 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 32
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 93
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 104 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 107 536 ASSIGN
   [enerjc] *** EXPAX_AST: tree = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 110
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 110
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = one
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = one
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 110
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 111 566 IDENT
   [enerjc] *** EXPAX_AST: tree = one
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 111 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 111 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 111 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 111 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 114 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 114 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 114
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 114 590 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 114 590 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 119
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 119 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 119 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 133 566 ASSIGN
   [enerjc] *** EXPAX_AST: tree = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 136
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 136
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m1
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = m1
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 136
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 137 594 IDENT
   [enerjc] *** EXPAX_AST: tree = m1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 137 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 137 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 137 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 137 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 140 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 143 617 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 143 617 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 143 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 146 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 146
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 146 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 158 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 161 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 161 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 164 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 167 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 167
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 167 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 179 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 185
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 185 630 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 185 630 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 189
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 189 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 189 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 192
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 192 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 192 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 201 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 204 622 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 208 635 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 208 635 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 208 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 208 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 211 636 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 211 636 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 211 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 214 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 214
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 214 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 226 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 229 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 229 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 232 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 235 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 235
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 235 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 247 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 253
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 253 649 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 253 649 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 257
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 257 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 257 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 260
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 260 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 260 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 269 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 272 641 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 276 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 279 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 279
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 279 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 291 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 297
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 297 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 297 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 300
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 300 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 300 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 309 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 315
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 315 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 315 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 318
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 318 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 318 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 334
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 334 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 334 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 345 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 348 594 ASSIGN
   [enerjc] *** EXPAX_AST: tree = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 351
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 351
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m2
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = m2
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 351
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 352 659 IDENT
   [enerjc] *** EXPAX_AST: tree = m2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 352 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 352 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 355 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 355 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 358 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 358
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 358 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 370 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 373 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 373 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 376 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 379 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 379
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 379 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 391 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 397
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 397 694 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 397 694 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 401
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 401 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 401 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 404
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 413 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 416 686 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 421
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 421 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 421 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 432 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 435 659 ASSIGN
   [enerjc] *** EXPAX_AST: tree = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 438
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = dm1
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = dm1
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 439 829 IDENT
   [enerjc] *** EXPAX_AST: tree = dm1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 439 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 439 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 439 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 439 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 442 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 445 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 445
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 445 850 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 445 850 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 449 856 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 449 856 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 449 856 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 449 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 449 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 449 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 452 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 452
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 452 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m1"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 464 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 471
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 471 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 471 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 474
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 474 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 474 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 483 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 490
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 490 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 490 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 501 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 504 829 ASSIGN
   [enerjc] *** EXPAX_AST: tree = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 507
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitAssign = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 507
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = haveRange
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = haveRange
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 507
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 508 871 IDENT
   [enerjc] *** EXPAX_AST: tree = haveRange
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 508 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 508 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 508 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 508 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 511 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 511 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 511
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 511 899 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 511 899 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 516
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 516 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 516 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 527 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 530 871 ASSIGN
   [enerjc] *** EXPAX_AST: tree = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 533
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 533
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 533
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 534 907 IDENT
   [enerjc] *** EXPAX_AST: tree = left
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 534 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 534 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 534 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 534 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 537 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 537 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 537
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 537 930 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 537 930 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 542
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 542 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 542 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 553 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 556 907 ASSIGN
   [enerjc] *** EXPAX_AST: tree = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 559
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 559
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 559
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 560 936 IDENT
   [enerjc] *** EXPAX_AST: tree = right
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 560 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 560 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 560 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 560 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 563 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 563 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 563
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 563 959 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 563 959 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 568
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 568 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 568 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 579 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 582 936 ASSIGN
   [enerjc] *** EXPAX_AST: tree = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 585
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 585
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = width
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = width
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 585
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 586 965 IDENT
   [enerjc] *** EXPAX_AST: tree = width
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 586 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 586 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 586 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 586 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 589 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 589 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 589
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 589 988 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 589 988 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 594
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 594 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 594 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 605 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 608 965 ASSIGN
   [enerjc] *** EXPAX_AST: tree = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 611
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 611
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 611
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 611 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 611 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 614 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 614
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 614 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = initialize(123456);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 621
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = initialize(123456);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = initialize(123456)
   [enerjc] *** EXPAX_GEN: visitApply = initialize(123456)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = initialize
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = initialize
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 621
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>() void 622 1324 IDENT
   [enerjc] *** EXPAX_AST: tree = initialize
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 123456
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public <init>(double left, double right) {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true);
   [enerjc]     enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc]     ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 628
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public <init>(double left, double right) {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true);
   [enerjc]     enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc]     ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = Random(double,double)
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public <init>(double left, double right) {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true);
   [enerjc]     enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc]     ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = <init>
   [enerjc] *** EXPAX_GEN: flatname = <init>
   [enerjc] *** EXPAX_GEN: qname = <init>
   [enerjc] *** EXPAX_GEN: sname<init>
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to <init>(double,double)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true);
   [enerjc]     enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc]     ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true);
   [enerjc]     enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(123456);
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc]     ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super()
   [enerjc] *** EXPAX_GEN: visitApply = super()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 0
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 0 1776 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 1 1776 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 4
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 5 460 IDENT
   [enerjc] *** EXPAX_AST: tree = seed
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 5 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 5 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 5 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 5 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 8 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 8 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 8
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 8 471 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 8 471 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 13
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 13 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 13 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 24 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 27 460 ASSIGN
   [enerjc] *** EXPAX_AST: tree = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 30
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 30
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 30
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 31 494 IDENT
   [enerjc] *** EXPAX_AST: tree = i
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 31 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 31 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 34 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 34 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 34
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 34 510 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 34 510 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 4
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 39
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 39 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 39 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 50 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 53 494 ASSIGN
   [enerjc] *** EXPAX_AST: tree = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 56
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 56
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 56
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 57 514 IDENT
   [enerjc] *** EXPAX_AST: tree = j
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 57 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 57 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 57 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 57 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 60 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 60 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 60
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 60 530 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 60 530 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 16
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 66
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 66 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 66 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 77 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 80 514 ASSIGN
   [enerjc] *** EXPAX_AST: tree = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 83
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = mdig
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = mdig
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 84 536 IDENT
   [enerjc] *** EXPAX_AST: tree = mdig
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 84 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 84 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 84 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 84 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 87 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 87 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 87
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 87 561 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 87 561 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 32
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 93
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 104 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 107 536 ASSIGN
   [enerjc] *** EXPAX_AST: tree = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 110
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 110
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = one
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = one
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 110
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 111 566 IDENT
   [enerjc] *** EXPAX_AST: tree = one
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 111 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 111 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 111 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 111 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 114 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 114 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 114
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 114 590 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 114 590 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 119
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 119 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 119 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 133 566 ASSIGN
   [enerjc] *** EXPAX_AST: tree = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 136
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 136
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m1
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = m1
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 136
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 137 594 IDENT
   [enerjc] *** EXPAX_AST: tree = m1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 137 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 137 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 137 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 137 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 140 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 143 617 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 143 617 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 143 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 146 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 146
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 146 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 158 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 161 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 161 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 164 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 167 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 167
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 167 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 179 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 185
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 185 630 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 185 630 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 189
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 189 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 189 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 192
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 192 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 192 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 201 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 204 622 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 208 635 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 208 635 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 208 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 208 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 211 636 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 211 636 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 211 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 214 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 214
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 214 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 226 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 229 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 229 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 232 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 235 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 235
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 235 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 247 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 253
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 253 649 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 253 649 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 257
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 257 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 257 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 260
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 260 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 260 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 269 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 272 641 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 276 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 279 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 279
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 279 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 291 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 297
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 297 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 297 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 300
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 300 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 300 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 309 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 315
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 315 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 315 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 318
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 318 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 318 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 334
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 334 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 334 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 345 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 348 594 ASSIGN
   [enerjc] *** EXPAX_AST: tree = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 351
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 351
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m2
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = m2
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 351
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 352 659 IDENT
   [enerjc] *** EXPAX_AST: tree = m2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 352 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 352 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 355 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 355 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 358 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 358
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 358 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 370 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 373 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 373 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 376 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 379 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 379
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 379 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 391 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 397
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 397 694 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 397 694 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 401
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 401 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 401 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 404
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 413 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 416 686 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 421
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 421 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 421 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 432 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 435 659 ASSIGN
   [enerjc] *** EXPAX_AST: tree = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 438
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = dm1
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = dm1
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 439 829 IDENT
   [enerjc] *** EXPAX_AST: tree = dm1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 439 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 439 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 439 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 439 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 442 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 445 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 445
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 445 850 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 445 850 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 449 856 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 449 856 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 449 856 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 449 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 449 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 449 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 452 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 452
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 452 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m1"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 464 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 471
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 471 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 471 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 474
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 474 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 474 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 483 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 490
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 490 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 490 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 501 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 504 829 ASSIGN
   [enerjc] *** EXPAX_AST: tree = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 507
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitAssign = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 507
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = haveRange
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = haveRange
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 507
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 508 871 IDENT
   [enerjc] *** EXPAX_AST: tree = haveRange
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 508 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 508 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 508 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 508 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 511 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 511 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 511
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 511 899 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 511 899 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 516
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 516 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 516 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 527 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 530 871 ASSIGN
   [enerjc] *** EXPAX_AST: tree = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 533
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 533
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 533
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 534 907 IDENT
   [enerjc] *** EXPAX_AST: tree = left
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 534 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 534 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 534 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 534 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 537 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 537 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 537
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 537 930 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 537 930 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 542
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 542 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 542 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 553 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 556 907 ASSIGN
   [enerjc] *** EXPAX_AST: tree = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 559
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 559
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 559
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 560 936 IDENT
   [enerjc] *** EXPAX_AST: tree = right
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 560 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 560 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 560 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 560 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 563 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 563 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 563
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 563 959 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 563 959 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 568
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 568 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 568 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 579 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 582 936 ASSIGN
   [enerjc] *** EXPAX_AST: tree = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 585
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 585
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = width
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = width
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 585
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 586 965 IDENT
   [enerjc] *** EXPAX_AST: tree = width
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 586 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 586 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 586 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 586 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 589 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 589 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 589
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 589 988 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 589 988 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 594
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 594 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 594 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 605 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 608 965 ASSIGN
   [enerjc] *** EXPAX_AST: tree = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 611
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 611 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(right)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(right)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 615
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 615 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 615 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 615
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 615 0 IDENT
   [enerjc] *** EXPAX_AST: tree = right
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 624 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 626
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 626 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(left)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(left)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 630
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 630 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 630 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 630
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 630 0 IDENT
   [enerjc] *** EXPAX_AST: tree = left
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 639 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 641
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 641
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 641
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 641 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 641 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 644 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 644
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 644 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = initialize(123456);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 651
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = initialize(123456);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = initialize(123456)
   [enerjc] *** EXPAX_GEN: visitApply = initialize(123456)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = initialize
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = initialize
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 651
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 652 1780 IDENT
   [enerjc] *** EXPAX_AST: tree = initialize
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 123456
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 657
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 657 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 660 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 660
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 660 1804 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "left"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 664
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 664 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 664 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 664 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 664
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 664 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 664
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 664
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 664 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 664 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 667 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = left__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 667
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 667 0 IDENT
   [enerjc] *** EXPAX_AST: tree = left__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 678 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 692 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 696
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 696
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 696 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 696
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 696
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 696 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 696 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 699 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 699
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 699 1824 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "right"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 703
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 703 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 703 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 703 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 703
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 703 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 703
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 703
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 703 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 703 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 706 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = right__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 706
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 706 0 IDENT
   [enerjc] *** EXPAX_AST: tree = right__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 717 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 731 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 735
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 735
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 735 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 735
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 735
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 735 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 735 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 738 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 738
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 738 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "width"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 742
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 742 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 742 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 742 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 742
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 742
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 742
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 742 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 742 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 745 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 745
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 745 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 745 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 745
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 745 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 745
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 745
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 745 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 745 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 748 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = right__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 748
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 748 0 IDENT
   [enerjc] *** EXPAX_AST: tree = right__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 759 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 765
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 765 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 765 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 765
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 765 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 765
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 765
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 765 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 765 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 768 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = left__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 768
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 768 0 IDENT
   [enerjc] *** EXPAX_AST: tree = left__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 779 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 785
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 785 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 785 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 788
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 788 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 788 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 797 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 811 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 815
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 815
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 815 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 815
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 815
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 815 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 815 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 818 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 818
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 818 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "haveRange"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf((boolean)true)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf((boolean)true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 822
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 822 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 822 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (boolean)true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(double,double) void 834 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public <init>(int seed) {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 839
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public <init>(int seed) {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = Random(int)
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public <init>(int seed) {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = <init>
   [enerjc] *** EXPAX_GEN: flatname = <init>
   [enerjc] *** EXPAX_GEN: qname = <init>
   [enerjc] *** EXPAX_GEN: sname<init>
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to <init>(int)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super()
   [enerjc] *** EXPAX_GEN: visitApply = super()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 0
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 0 2151 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 1 2151 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 4
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 5 460 IDENT
   [enerjc] *** EXPAX_AST: tree = seed
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 5 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 5 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 5 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 5 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 8 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 8 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 8
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 8 471 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 8 471 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 13
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 13 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 13 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 24 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 27 460 ASSIGN
   [enerjc] *** EXPAX_AST: tree = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 30
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 30
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 30
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 31 494 IDENT
   [enerjc] *** EXPAX_AST: tree = i
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 31 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 31 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 34 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 34 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 34
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 34 510 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 34 510 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 4
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 39
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 39 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 39 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 50 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 53 494 ASSIGN
   [enerjc] *** EXPAX_AST: tree = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 56
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 56
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 56
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 57 514 IDENT
   [enerjc] *** EXPAX_AST: tree = j
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 57 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 57 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 57 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 57 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 60 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 60 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 60
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 60 530 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 60 530 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 16
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 66
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 66 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 66 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 77 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 80 514 ASSIGN
   [enerjc] *** EXPAX_AST: tree = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 83
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = mdig
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = mdig
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 84 536 IDENT
   [enerjc] *** EXPAX_AST: tree = mdig
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 84 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 84 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 84 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 84 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 87 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 87 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 87
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 87 561 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 87 561 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 32
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 93
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 104 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 107 536 ASSIGN
   [enerjc] *** EXPAX_AST: tree = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 110
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 110
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = one
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = one
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 110
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 111 566 IDENT
   [enerjc] *** EXPAX_AST: tree = one
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 111 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 111 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 111 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 111 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 114 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 114 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 114
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 114 590 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 114 590 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 119
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 119 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 119 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 133 566 ASSIGN
   [enerjc] *** EXPAX_AST: tree = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 136
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 136
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m1
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = m1
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 136
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 137 594 IDENT
   [enerjc] *** EXPAX_AST: tree = m1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 137 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 137 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 137 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 137 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 140 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 143 617 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 143 617 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 143 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 146 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 146
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 146 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 158 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 161 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 161 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 164 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 167 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 167
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 167 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 179 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 185
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 185 630 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 185 630 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 189
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 189 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 189 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 192
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 192 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 192 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 201 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 204 622 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 208 635 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 208 635 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 208 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 208 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 211 636 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 211 636 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 211 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 214 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 214
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 214 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 226 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 229 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 229 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 232 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 235 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 235
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 235 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 247 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 253
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 253 649 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 253 649 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 257
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 257 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 257 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 260
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 260 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 260 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 269 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 272 641 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 276 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 279 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 279
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 279 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 291 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 297
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 297 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 297 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 300
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 300 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 300 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 309 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 315
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 315 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 315 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 318
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 318 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 318 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 334
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 334 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 334 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 345 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 348 594 ASSIGN
   [enerjc] *** EXPAX_AST: tree = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 351
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 351
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m2
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = m2
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 351
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 352 659 IDENT
   [enerjc] *** EXPAX_AST: tree = m2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 352 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 352 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 355 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 355 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 358 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 358
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 358 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 370 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 373 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 373 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 376 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 379 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 379
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 379 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 391 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 397
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 397 694 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 397 694 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 401
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 401 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 401 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 404
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 413 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 416 686 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 421
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 421 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 421 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 432 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 435 659 ASSIGN
   [enerjc] *** EXPAX_AST: tree = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 438
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = dm1
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = dm1
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 439 829 IDENT
   [enerjc] *** EXPAX_AST: tree = dm1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 439 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 439 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 439 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 439 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 442 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 445 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 445
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 445 850 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 445 850 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 449 856 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 449 856 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 449 856 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 449 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 449 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 449 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 452 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 452
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 452 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m1"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 464 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 471
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 471 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 471 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 474
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 474 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 474 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 483 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 490
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 490 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 490 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 501 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 504 829 ASSIGN
   [enerjc] *** EXPAX_AST: tree = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 507
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitAssign = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 507
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = haveRange
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = haveRange
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 507
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 508 871 IDENT
   [enerjc] *** EXPAX_AST: tree = haveRange
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 508 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 508 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 508 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 508 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 511 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 511 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 511
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 511 899 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 511 899 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 516
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 516 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 516 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 527 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 530 871 ASSIGN
   [enerjc] *** EXPAX_AST: tree = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 533
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 533
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 533
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 534 907 IDENT
   [enerjc] *** EXPAX_AST: tree = left
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 534 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 534 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 534 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 534 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 537 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 537 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 537
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 537 930 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 537 930 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 542
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 542 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 542 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 553 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 556 907 ASSIGN
   [enerjc] *** EXPAX_AST: tree = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 559
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 559
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 559
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 560 936 IDENT
   [enerjc] *** EXPAX_AST: tree = right
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 560 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 560 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 560 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 560 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 563 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 563 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 563
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 563 959 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 563 959 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 568
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 568 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 568 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 579 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 582 936 ASSIGN
   [enerjc] *** EXPAX_AST: tree = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 585
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 585
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = width
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = width
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 585
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 586 965 IDENT
   [enerjc] *** EXPAX_AST: tree = width
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 586 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 586 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 586 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 586 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 589 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 589 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 589
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 589 988 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 589 988 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 594
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 594 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 594 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 605 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 608 965 ASSIGN
   [enerjc] *** EXPAX_AST: tree = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 611
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 611 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(seed)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(seed)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 615
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 615 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 615 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 615
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 615 0 IDENT
   [enerjc] *** EXPAX_AST: tree = seed
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 624 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 625
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 625
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 625
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 625 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 625 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 628 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 628
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 628 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 635
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = initialize
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = initialize
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 635
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 636 2155 IDENT
   [enerjc] *** EXPAX_AST: tree = initialize
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 636
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 636 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 636
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 636
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 636 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 636 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 639 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 639
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 639 0 IDENT
   [enerjc] *** EXPAX_AST: tree = seed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int) void 649 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public <init>(int seed, double left, double right) {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true);
   [enerjc]     enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true);
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc]     ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 656
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public <init>(int seed, double left, double right) {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true);
   [enerjc]     enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true);
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc]     ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = Random(int,double,double)
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public <init>(int seed, double left, double right) {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true);
   [enerjc]     enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true);
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc]     ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = <init>
   [enerjc] *** EXPAX_GEN: flatname = <init>
   [enerjc] *** EXPAX_GEN: qname = <init>
   [enerjc] *** EXPAX_GEN: sname<init>
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to <init>(int,double,double)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true);
   [enerjc]     enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true);
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc]     ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     super();
   [enerjc]     seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc]     dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc]     left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc]     enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true);
   [enerjc]     enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true);
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc]     initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc]     ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super()
   [enerjc] *** EXPAX_GEN: visitApply = super()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 0
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 0 2701 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 1 2701 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 4
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 5 460 IDENT
   [enerjc] *** EXPAX_AST: tree = seed
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 5 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 5 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 5
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 5 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 5 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 8 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 8 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 8
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 8 471 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 8 471 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 13
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 13 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 13 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 24 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 27 460 ASSIGN
   [enerjc] *** EXPAX_AST: tree = seed = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 30
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 30
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 30
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 31 494 IDENT
   [enerjc] *** EXPAX_AST: tree = i
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 31 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 31 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 34 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 34 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(4)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 34
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 34 510 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 34 510 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 4
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 39
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 39 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 39 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 50 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 53 494 ASSIGN
   [enerjc] *** EXPAX_AST: tree = i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(4), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 56
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 56
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 56
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 57 514 IDENT
   [enerjc] *** EXPAX_AST: tree = j
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 57 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 57 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 57 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 57 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 60 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 60 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(16)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 60
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 60 530 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 60 530 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 16
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 66
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 66 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 66 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 77 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 80 514 ASSIGN
   [enerjc] *** EXPAX_AST: tree = j = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(16), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 83
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = mdig
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = mdig
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 84 536 IDENT
   [enerjc] *** EXPAX_AST: tree = mdig
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 84 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 84 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 84
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 84 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 84 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 87 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 87 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(32)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 87
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 87 561 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 87 561 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 32
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 93
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 104 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 107 536 ASSIGN
   [enerjc] *** EXPAX_AST: tree = mdig = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(32), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 110
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 110
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = one
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = one
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 110
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 111 566 IDENT
   [enerjc] *** EXPAX_AST: tree = one
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 111 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 111 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 111
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 111 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 111 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 114 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 114 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 114
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 114 590 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 114 590 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 119
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 119 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 119 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 133 566 ASSIGN
   [enerjc] *** EXPAX_AST: tree = one = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 136
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 136
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m1
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = m1
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 136
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 137 594 IDENT
   [enerjc] *** EXPAX_AST: tree = m1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 137 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 137 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 137 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 137 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 140 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 140
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 140 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 143 617 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 143 617 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 143 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 143
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 143 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 146 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 146
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 146 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 158 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 161 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 161 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 164 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 167 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 167
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 167 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 179 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 185
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 185 630 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 185 630 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 189
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 189 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 189 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 192
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 192 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 192 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 201 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 204 622 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 208 635 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 208 635 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 208 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 208 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 211 636 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 211 636 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 211 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 214 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 214
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 214 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 226 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 229
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 229 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 229 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 232 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 232
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 232 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 235 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 235
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 235 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 247 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 253
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 253 649 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 253 649 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 257
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 257 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 257 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 260
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 260 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 260 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 269 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 272 641 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 276 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 276
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 276 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 279 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 279
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 279 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 291 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 297
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 297 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 297 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 300
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 300 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 300 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 309 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 315
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 315 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 315 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 318
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 318 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 318 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 334
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 334 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 334 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 345 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 348 594 ASSIGN
   [enerjc] *** EXPAX_AST: tree = m1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf((((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 351
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 351
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = m2
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = m2
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 351
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 352 659 IDENT
   [enerjc] *** EXPAX_AST: tree = m2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 352 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 352 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 355 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 355 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 355
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 355 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 358 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 358
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 358 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "one"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 370 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 373
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 373 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 373 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 376 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 376
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 376 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 379 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 379
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 379 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "mdig"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 391 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 397
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 397 694 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 397 694 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 401
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 401 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 401 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 404
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 413 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 416 686 SL
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 421
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 421 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 421 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 432 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 435 659 ASSIGN
   [enerjc] *** EXPAX_AST: tree = m2 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "one", false)).intValue() << enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "mdig", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 438
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = dm1
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = dm1
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 439 829 IDENT
   [enerjc] *** EXPAX_AST: tree = dm1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 439 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 439 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 439
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 439 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 439 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 442 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 445 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 445
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 445 850 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 445 850 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 449 856 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 449 856 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 449 856 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 449 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 449 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 449 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 452 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 452
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 452 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m1"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 464 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 471
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 471 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 471 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 474
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 474 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 474 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 483 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 490
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 490 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 490 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 501 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 504 829 ASSIGN
   [enerjc] *** EXPAX_AST: tree = dm1 = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(1.0), Double.valueOf((double)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 507
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitAssign = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 507
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = haveRange
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = haveRange
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 507
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 508 871 IDENT
   [enerjc] *** EXPAX_AST: tree = haveRange
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 508 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 508 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 508
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 508 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 508 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 511 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 511 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Boolean)Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 511
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 511 899 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 511 899 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 516
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 516 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 516 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 527 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 530 871 ASSIGN
   [enerjc] *** EXPAX_AST: tree = haveRange = (boolean)((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Boolean)Boolean.valueOf(false), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).booleanValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 533
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 533
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 533
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 534 907 IDENT
   [enerjc] *** EXPAX_AST: tree = left
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 534 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 534 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 534
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 534 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 534 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 537 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 537 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 537
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 537 930 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 537 930 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 542
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 542 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 542 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 553 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 556 907 ASSIGN
   [enerjc] *** EXPAX_AST: tree = left = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 559
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 559
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 559
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 560 936 IDENT
   [enerjc] *** EXPAX_AST: tree = right
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 560 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 560 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 560
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 560 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 560 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 563 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 563 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 563
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 563 959 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 563 959 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 568
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 568 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 568 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 579 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 582 936 ASSIGN
   [enerjc] *** EXPAX_AST: tree = right = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 585
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitAssign (bytecode offset) = 585
   [enerjc] *** EXPAX_GEN: tree.getTag() = ASSIGN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = width
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = width
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 585
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 586 965 IDENT
   [enerjc] *** EXPAX_AST: tree = width
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 586 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 586 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 586
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 586 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 586 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 589 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 589 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(1.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 589
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 589 988 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 589 988 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 594
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 594 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 594 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.FIELD
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 605 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitAssign
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 608 965 ASSIGN
   [enerjc] *** EXPAX_AST: tree = width = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(1.0), false, enerj.rt.PrecisionRuntime$MemKind.FIELD)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 611
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 611 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(right)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(right)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 615
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 615 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 615 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = right
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 615
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 615 0 IDENT
   [enerjc] *** EXPAX_AST: tree = right
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 625 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference right__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(right), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 627
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 627 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(left)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(left)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 631
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 631 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 631 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = left
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 631
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 631 0 IDENT
   [enerjc] *** EXPAX_AST: tree = left
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 640 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference left__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(left), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 642
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 642 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(seed)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(seed)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 646
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 646 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 646 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 646
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 646 0 IDENT
   [enerjc] *** EXPAX_AST: tree = seed
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 655 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 657
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 660 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 660
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 660 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 667
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue());
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = initialize(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = initialize
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = initialize
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 667
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 668 2705 IDENT
   [enerjc] *** EXPAX_AST: tree = initialize
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 668
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 668 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 668
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 668
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 668 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 668 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 671 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 671
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 671 0 IDENT
   [enerjc] *** EXPAX_AST: tree = seed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 682 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 688
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 688
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 688 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 688
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 688
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 688 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 688 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 691 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 691
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 691 2726 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "left"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 695
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 695 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 695 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 695 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 695
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 695 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 695
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 695
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 695 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 695 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 698 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = left__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 698
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 698 0 IDENT
   [enerjc] *** EXPAX_AST: tree = left__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 709 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 723 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "left", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 727
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 727
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 727 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 727
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 727
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 727 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 727 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 730 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 730
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 730 2746 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "right"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 734
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 734 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 734 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 734 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 734
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 734 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 734
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 734
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 734 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 734 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 737 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = right__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 737
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 737 0 IDENT
   [enerjc] *** EXPAX_AST: tree = right__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 748 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 762 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "right", false, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 766
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 766
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 766 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 766
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 766
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 766 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 766 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 769 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 769
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 769 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "width"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 773
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 773 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 773 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 773 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 773
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 773
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 773
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 773 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 773 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 776 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 776
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 776 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 776 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 776
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 776 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 776
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 776
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 776 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 776 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 779 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = right__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = right__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 779
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 779 0 IDENT
   [enerjc] *** EXPAX_AST: tree = right__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 790 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 796
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 796 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 796 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 796
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 796 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 796
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 796
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 796 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 796 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 799 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = left__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = left__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 799
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 799 0 IDENT
   [enerjc] *** EXPAX_AST: tree = left__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 810 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 816
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 816 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 816 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 819
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 819 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 819 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 828 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 842 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeField(this, "width", false, Double.valueOf((double)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(right__REF__, false)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(left__REF__, false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 846
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 846
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 846 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 846
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 846
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 846 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 846 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 849 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 849
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 849 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "haveRange"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf((boolean)true)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf((boolean)true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 853
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 853 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 853 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (boolean)true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random <init>(int,double,double) void 865 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>storeField(this, "haveRange", false, Boolean.valueOf((boolean)true))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] @Approx()
   [enerjc] public final synchronized double nextDouble() {
   [enerjc]     int k;
   [enerjc]     enerj.rt.Reference k__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     double nextValue;
   [enerjc]     enerj.rt.Reference nextValue__REF__ = new <java.lang.Double>enerj.rt.Reference(null, false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue();
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue()) return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue(); else return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 870
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] @Approx()
   [enerjc] public final synchronized double nextDouble() {
   [enerjc]     int k;
   [enerjc]     enerj.rt.Reference k__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     double nextValue;
   [enerjc]     enerj.rt.Reference nextValue__REF__ = new <java.lang.Double>enerj.rt.Reference(null, false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue();
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue()) return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue(); else return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = nextDouble()
   [enerjc] *** EXPAX_GEN: return type = double
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] @Approx()
   [enerjc] public final synchronized double nextDouble() {
   [enerjc]     int k;
   [enerjc]     enerj.rt.Reference k__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     double nextValue;
   [enerjc]     enerj.rt.Reference nextValue__REF__ = new <java.lang.Double>enerj.rt.Reference(null, false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue();
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue()) return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue(); else return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = nextDouble
   [enerjc] *** EXPAX_GEN: flatname = nextDouble
   [enerjc] *** EXPAX_GEN: qname = nextDouble
   [enerjc] *** EXPAX_GEN: snamenextDouble
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to nextDouble()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     int k;
   [enerjc]     enerj.rt.Reference k__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     double nextValue;
   [enerjc]     enerj.rt.Reference nextValue__REF__ = new <java.lang.Double>enerj.rt.Reference(null, false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue();
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue()) return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue(); else return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     int k;
   [enerjc]     enerj.rt.Reference k__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     double nextValue;
   [enerjc]     enerj.rt.Reference nextValue__REF__ = new <java.lang.Double>enerj.rt.Reference(null, false, true);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue();
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue()) return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue(); else return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int k
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitVarDef = int k
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference k__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference k__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 0 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = LITERAL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 10 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference k__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = double nextValue
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 11
   [enerjc] *** EXPAX_GEN: visitVarDef = double nextValue
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference nextValue__REF__ = new <java.lang.Double>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 11
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference nextValue__REF__ = new <java.lang.Double>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Double>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Double>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 11 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Double>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral (bytecode offset) = 15
   [enerjc] *** EXPAX_GEN: tree.getTag() = LITERAL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 21 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference nextValue__REF__ = new <java.lang.Double>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 23
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 23
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 23
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 23 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 23 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 26 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 26
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 26 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 28
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 28 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 28 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 28 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 28
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 28
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 28
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 28 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 28 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 31 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 34 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 34
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 34
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 34 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 34 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 37 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 37
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 37 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 46
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 46 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 46
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 46
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 46 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 46 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 49 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 49
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 49 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "i"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 61 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 73 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 79
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 79 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 79 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 79
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 79 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 79
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 79
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 79 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 79 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 82 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 82
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 82
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 82 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 82 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 85 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 85
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 85 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 94
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 94 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 94
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 94
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 94 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 94 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 97 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 97
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 97 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "j"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 109 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 121 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 127
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 127 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 127 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 130
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 139 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue(), false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 151
   [enerjc] *** EXPAX_GEN: visitIf = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 151
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 151 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 151
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 151
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 151 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 151 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 154 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 154
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 154 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 154 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 154
   [enerjc] *** EXPAX_GEN: tree.getTag() = LT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 154
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 154 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 154
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 154
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 154 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 154 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 157 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 157
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 157 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 167 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 170 3193 LT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 189 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue() < 0))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 195
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(k__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 195
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 195
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 195 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 195 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 198 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 198
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 198 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 199
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 199 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 199 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 202
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 202 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 202 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 202
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 202 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 202
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 202
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 202 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 202 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 205 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 205
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 205 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m1"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 217 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 224
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 224 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 224 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 237
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 237
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 237 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 237
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 237
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 237 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 237 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 237 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 237
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 237
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 237 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 237 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 240 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 240
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 240 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 249
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 249 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 249
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 249
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 249 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 249 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 252 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 252
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 252 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "j"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 264 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 268
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 268 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 268 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 268 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 268
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 268 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 268
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 268
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 268 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 268 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 271 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 271
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 271 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 281 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 295 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue(), false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 299
   [enerjc] *** EXPAX_GEN: visitIf = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 299
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 299 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 299
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 299
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 299 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 299 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 302 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 302
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 302 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 302 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 302
   [enerjc] *** EXPAX_GEN: tree.getTag() = EQ
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 302
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 302 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 302
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 302
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 302 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 302 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 305 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 305
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 305 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "i"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 317 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 320 3234 EQ
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 339 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "i", false)).intValue() == 0))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 345
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 345
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 345 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 345
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 345
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 345 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 345 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 348 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 348
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 348 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "i"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)16)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)16)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)16
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 365 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)16))).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 372
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "i", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 372
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 372
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 372 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 372 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 375 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 375
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 375 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "i"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 378
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 378 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 378 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 381
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 381 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 381 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 386
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 386 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 386 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 396
   [enerjc] *** EXPAX_GEN: visitIf = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue()) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue(); else enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 396
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 396 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 396
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 396
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 396 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 396 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 399 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 399
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 399 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 399 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 399
   [enerjc] *** EXPAX_GEN: tree.getTag() = EQ
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 399
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 399 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 399
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 399
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 399 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 399 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 402 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 402
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 402 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "j"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 414 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 417 3277 EQ
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 436 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "j", false)).intValue() == 0))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 442
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 442 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 442 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 445 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 445
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 445 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "j"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)16)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)16)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 449
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 449 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 449 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)16
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 462 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 469
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>assignopField(this, "j", enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 469
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 469
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 469 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 469 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 472 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 472
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 472 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "j"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 475
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 475 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 475 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 478
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 478 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 478 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 483
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 483 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 483 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue()) return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue(); else return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 493
   [enerjc] *** EXPAX_GEN: visitIf = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue()) return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue(); else return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 493
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 493 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 493
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 493
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 493 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 493 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 496 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 496
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 496 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "haveRange"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 508 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Boolean>loadField(this, "haveRange", false)).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = RETURN
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 514
   [enerjc] *** EXPAX_GEN: visitReturn = return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = RETURN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 514
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 514
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 514
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 514 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 514 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 517 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 517
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 517 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 517 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 517
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 517 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 517
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 517
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 517 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 517 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 520 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 520
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 520 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "left"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 532 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 538
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 538 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 538 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 538
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 538
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 538
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 538 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 538 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 541 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 541
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 541 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 541 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 541
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 541
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 541
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 541 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 541 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 544 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 544
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 544 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 544 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 544
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 544 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 544
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 544
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 544 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 544 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 547 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 547
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 547 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "dm1"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 559 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 565
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 565 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 565 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 565
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 565 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 565
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 565
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 565 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 565 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 568 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 568
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 568 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 578 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 584
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 584 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 584 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 587
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 587 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 587 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 596 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 602
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 602 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 602 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 602
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 602 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 602
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 602
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 602 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 602 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 605 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 605
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 605 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "width"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 617 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 623
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 623 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 623 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 626
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 626 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 626 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 635 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 641
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 641 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 641 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 644
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 644 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 644 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 653 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "left", false)).doubleValue()), Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "width", false)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = RETURN
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 657
   [enerjc] *** EXPAX_GEN: visitReturn = return enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = RETURN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 660 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 660
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 660 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 660 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 660
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 660 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 660
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 660
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 660 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 660 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 663 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 663
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 663 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "dm1"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 675 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 681
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 681 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 681 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 681
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 681 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 681
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 681
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 681 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 681 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 684 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 684
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 684 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 694 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 700
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 700 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 700 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 703
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 703 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 703 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random nextDouble() double 712 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(this, "dm1", false)).doubleValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, false).doubleValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] private void initialize(int seed) {
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     int jseed;
   [enerjc]     enerj.rt.Reference jseed__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int k0;
   [enerjc]     enerj.rt.Reference k0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int k1;
   [enerjc]     enerj.rt.Reference k1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int j0;
   [enerjc]     enerj.rt.Reference j0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int j1;
   [enerjc]     enerj.rt.Reference j1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int iloop;
   [enerjc]     enerj.rt.Reference iloop__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<int[]>storeField(this, "m", false, (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())));
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k0__REF__, false, Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     for (enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0)); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]         ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     }
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue();
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 716
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] private void initialize(int seed) {
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     int jseed;
   [enerjc]     enerj.rt.Reference jseed__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int k0;
   [enerjc]     enerj.rt.Reference k0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int k1;
   [enerjc]     enerj.rt.Reference k1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int j0;
   [enerjc]     enerj.rt.Reference j0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int j1;
   [enerjc]     enerj.rt.Reference j1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int iloop;
   [enerjc]     enerj.rt.Reference iloop__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<int[]>storeField(this, "m", false, (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())));
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k0__REF__, false, Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     for (enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0)); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]         ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     }
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue();
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = initialize(int)
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] private void initialize(int seed) {
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     int jseed;
   [enerjc]     enerj.rt.Reference jseed__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int k0;
   [enerjc]     enerj.rt.Reference k0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int k1;
   [enerjc]     enerj.rt.Reference k1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int j0;
   [enerjc]     enerj.rt.Reference j0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int j1;
   [enerjc]     enerj.rt.Reference j1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int iloop;
   [enerjc]     enerj.rt.Reference iloop__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<int[]>storeField(this, "m", false, (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())));
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k0__REF__, false, Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     for (enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0)); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]         ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     }
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue();
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = initialize
   [enerjc] *** EXPAX_GEN: flatname = initialize
   [enerjc] *** EXPAX_GEN: qname = initialize
   [enerjc] *** EXPAX_GEN: snameinitialize
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to initialize(int)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     int jseed;
   [enerjc]     enerj.rt.Reference jseed__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int k0;
   [enerjc]     enerj.rt.Reference k0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int k1;
   [enerjc]     enerj.rt.Reference k1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int j0;
   [enerjc]     enerj.rt.Reference j0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int j1;
   [enerjc]     enerj.rt.Reference j1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int iloop;
   [enerjc]     enerj.rt.Reference iloop__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<int[]>storeField(this, "m", false, (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())));
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k0__REF__, false, Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     for (enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0)); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]         ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     }
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue();
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true);
   [enerjc]     int jseed;
   [enerjc]     enerj.rt.Reference jseed__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int k0;
   [enerjc]     enerj.rt.Reference k0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int k1;
   [enerjc]     enerj.rt.Reference k1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int j0;
   [enerjc]     enerj.rt.Reference j0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int j1;
   [enerjc]     enerj.rt.Reference j1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     int iloop;
   [enerjc]     enerj.rt.Reference iloop__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<int[]>storeField(this, "m", false, (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())));
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k0__REF__, false, Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     for (enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0)); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc]         enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]         ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     }
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue();
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 0 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(seed)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(seed)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 4 0 IDENT
   [enerjc] *** EXPAX_AST: tree = seed
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 13 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference seed__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(seed), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int jseed
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 14
   [enerjc] *** EXPAX_GEN: visitVarDef = int jseed
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference jseed__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 14
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference jseed__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 14 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral (bytecode offset) = 18
   [enerjc] *** EXPAX_GEN: tree.getTag() = LITERAL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 24 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference jseed__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int k0
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 26
   [enerjc] *** EXPAX_GEN: visitVarDef = int k0
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference k0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 26
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference k0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 26 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral (bytecode offset) = 30
   [enerjc] *** EXPAX_GEN: tree.getTag() = LITERAL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 36 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference k0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int k1
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 38
   [enerjc] *** EXPAX_GEN: visitVarDef = int k1
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference k1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 38
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference k1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 38 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral (bytecode offset) = 42
   [enerjc] *** EXPAX_GEN: tree.getTag() = LITERAL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 48 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference k1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int j0
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 50
   [enerjc] *** EXPAX_GEN: visitVarDef = int j0
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference j0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 50
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference j0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 50 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral (bytecode offset) = 54
   [enerjc] *** EXPAX_GEN: tree.getTag() = LITERAL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 60 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference j0__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int j1
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 62
   [enerjc] *** EXPAX_GEN: visitVarDef = int j1
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference j1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 62
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference j1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 62 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral (bytecode offset) = 66
   [enerjc] *** EXPAX_GEN: tree.getTag() = LITERAL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 72 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference j1__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int iloop
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 74
   [enerjc] *** EXPAX_GEN: visitVarDef = int iloop
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference iloop__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 74
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference iloop__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 74 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral (bytecode offset) = 78
   [enerjc] *** EXPAX_GEN: tree.getTag() = LITERAL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 84 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference iloop__REF__ = new <java.lang.Integer>enerj.rt.Reference(null, false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 86
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 86
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 86 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 86
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 86
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 86 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 86 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 89 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 89
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 89 3656 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "seed"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 93
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 93 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 93
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 93 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 93
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 93
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 93 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 96 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 96
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 96 0 IDENT
   [enerjc] *** EXPAX_AST: tree = seed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 106 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 120 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "seed", false, Integer.valueOf((int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>storeField(this, "m", false, (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 124
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>storeField(this, "m", false, (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>storeField(this, "m", false, (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>storeField(this, "m", false, (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 124
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 124
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 124 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 124 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 127 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 127
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 127 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 131 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 131 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int[])enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[17], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 131
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 131
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 131 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 131 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 134 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new int[17]
   [enerjc] *** EXPAX_GEN: visitNewArray = new int[17]
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWARRAY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 17
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewArray#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 136 3681 NEWARRAY
   [enerjc] *** EXPAX_AST: tree = new int[17]
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 4
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 159
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 159
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 159
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 159 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 159 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 162 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 162
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 162 0 IDENT
   [enerjc] *** EXPAX_AST: tree = jseed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 165
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 165 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 165 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 165 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Math.min(Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Math.min
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Math.min
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 165
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 165 3709 SELECT
   [enerjc] *** EXPAX_AST: tree = Math.min
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 165 3709 SELECT
   [enerjc] *** EXPAX_AST: tree = Math.min
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Math.abs(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Math.abs
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Math.abs
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 165
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 165 3718 SELECT
   [enerjc] *** EXPAX_AST: tree = Math.abs
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 165 3718 SELECT
   [enerjc] *** EXPAX_AST: tree = Math.abs
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 165
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 165 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 165
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 165
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 165 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 165 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 168 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 168
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 168 0 IDENT
   [enerjc] *** EXPAX_AST: tree = seed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 178 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(seed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 184
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 184 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 184
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 184
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 184 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 184 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 187 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 187
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 187 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m1"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 199 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m1", false)).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 214
   [enerjc] *** EXPAX_GEN: visitIf = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 214
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 214 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 214
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 214
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 214 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 214 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 217 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 217
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 217 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 217 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 217
   [enerjc] *** EXPAX_GEN: tree.getTag() = EQ
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 217
   [enerjc] *** EXPAX_GEN: tree.getTag() = MOD
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 217
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 217 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 217
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 217
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 217 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 217 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 220 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 220
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 220 0 IDENT
   [enerjc] *** EXPAX_AST: tree = jseed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 231 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 235 3746 MOD
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 236 3750 EQ
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 255 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % 2 == 0))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 261
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(jseed__REF__, enerj.rt.PrecisionRuntime$ArithOperator.MINUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 261
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 261
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 261 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 261 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 264 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 264
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 264 0 IDENT
   [enerjc] *** EXPAX_AST: tree = jseed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 266
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 266 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 266 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 269
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 269 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 269 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 274
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 274 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 274 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k0__REF__, false, Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 287
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k0__REF__, false, Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k0__REF__, false, Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k0__REF__, false, Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 287
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 287
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 287
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 287 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k0__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 290
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 290 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 290 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 290 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)(9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = 9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 290
   [enerjc] *** EXPAX_GEN: tree.getTag() = MOD
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 9069
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 293
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 293 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 293
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 293
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 293 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 293 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 296 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 296
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 296 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m2"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 308 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 311 3777 MOD
   [enerjc] *** EXPAX_AST: tree = 9069 % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 321
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(k1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 321
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 321
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 321 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 321 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 324 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 324
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 324 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k1__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 327
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 327 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 327
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 327
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 327
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 330 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(9069)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(9069)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 330
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 330 3790 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 330 3790 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 9069
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 336
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 336 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 336 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 336
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 336 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 336
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 336
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 336 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 336 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 339 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 339
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 339 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m2"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 351 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 357
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 357 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 357 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 360
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 360 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 360 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 369 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(9069), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 381
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 381
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 381
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 381 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 381 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 384 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 384
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 384 0 IDENT
   [enerjc] *** EXPAX_AST: tree = j0__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 387
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 387 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 387 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 387 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 387
   [enerjc] *** EXPAX_GEN: tree.getTag() = MOD
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 387
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 387 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 387
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 387
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 387 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 387 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 390 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 390
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 390 0 IDENT
   [enerjc] *** EXPAX_AST: tree = jseed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 401 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 404
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 404 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 404
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 404
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 407 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 407
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 407 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m2"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 419 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 422 3814 MOD
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 432
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 432
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 432
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 432 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 432 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 435 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 435
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 435 0 IDENT
   [enerjc] *** EXPAX_AST: tree = j1__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 438 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 438 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 438 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 438
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 438 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 438 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 441 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 441
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 441 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 441 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 441
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 441 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 441
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 441
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 441 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 441 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 444 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 444
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 444 0 IDENT
   [enerjc] *** EXPAX_AST: tree = jseed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 455 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 461
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 461 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 461 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 461
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 461 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 461
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 461
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 461 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 461 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 464 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 464
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 464 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m2"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 476 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 482
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 482 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 482 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 485
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 485 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 485 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 494 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = for (enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0)); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 506
   [enerjc] *** EXPAX_GEN: visitForLoop = for (enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0)); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 506
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(iloop__REF__, false, Integer.valueOf((int)0))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 506
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 506
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 506 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 506 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 509 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = iloop__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = iloop__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 509
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 509 0 IDENT
   [enerjc] *** EXPAX_AST: tree = iloop__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 512
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 512 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 512 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 522
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 522 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 522
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 522
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 522 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 522 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 525 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 525
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 525 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 525 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 525
   [enerjc] *** EXPAX_GEN: tree.getTag() = LT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 525
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 525 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 525
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 525
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 525 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 525 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 528 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = iloop__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = iloop__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 528
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 528 0 IDENT
   [enerjc] *** EXPAX_AST: tree = iloop__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 539 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 17
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 544 3863 LT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 563 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue() < 17))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 569
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 569
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(jseed__REF__, false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 569
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 569
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 569 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 569 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 572 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 572
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 572 0 IDENT
   [enerjc] *** EXPAX_AST: tree = jseed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 575
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 575 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 575 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 575 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 575
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 575
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 575
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 575 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 575 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 578 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 578
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 578 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 578 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 578
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 578 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 578
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 578
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 578 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 578 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 581 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 581
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 581 0 IDENT
   [enerjc] *** EXPAX_AST: tree = j0__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 592 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 598
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 598 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 598 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 598
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 598 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 598
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 598
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 598 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 598 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 601 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 601
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 601 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k0__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 612 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 618
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 618 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 618 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 621
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 621 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 621 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 630 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 642
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j1__REF__, false, Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 642
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 642
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 642 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 642 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 645 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 645
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 645 0 IDENT
   [enerjc] *** EXPAX_AST: tree = j1__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 648
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 648 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 648 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 648 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitBinary = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 648
   [enerjc] *** EXPAX_GEN: tree.getTag() = MOD
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 648
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 648
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 648
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 648 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 648 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 651 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 651
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 651 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 651 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 651
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 651
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 651
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 651 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 651 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 654 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 654
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 654 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 654 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 654
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 654
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 654
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 654 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 654 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 657 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 657
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 657 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 660 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 660
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 660 0 IDENT
   [enerjc] *** EXPAX_AST: tree = jseed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 671 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 677
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 677 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 677 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 677
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 677 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 677
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 677
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 677 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 677 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 680 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 680
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 680 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m2"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 692 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 698
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 698 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 698 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 701
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 701 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 701 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 710 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 716
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 716 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 716 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 716
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 716
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 716
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 716 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 716 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 719 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 719
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 719 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 719 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 719
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 719 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 719
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 719
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 719 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 719 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 722 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 722
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 722 0 IDENT
   [enerjc] *** EXPAX_AST: tree = j0__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 733 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 739
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 739 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 739 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 739
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 739 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 739
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 739
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 739 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 739 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 742 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 742
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 742 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k1__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 753 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 759
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 759 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 759 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 762
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 762 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 762 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 771 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 777
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 777 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 777 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 780
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 780 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 780 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 789 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 795
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 795 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 795 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 795
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 795
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 795
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 795 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 795 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 798 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 798
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 798 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 798 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 798
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 798 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 798
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 798
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 798 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 798 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 801 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 801
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 801 0 IDENT
   [enerjc] *** EXPAX_AST: tree = j1__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 812 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 818
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 818 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 818 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 818
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 818 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 818
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 818
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 818 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 818 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 821 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = k0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = k0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 821
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 821 0 IDENT
   [enerjc] *** EXPAX_AST: tree = k0__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 832 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 838
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 838 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 838 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 841
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 841 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 841 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 850 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 856
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 856 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 856 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 859
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 859 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 859 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 868 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitParens = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = PARENS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 871
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 871
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 871
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 871 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 871 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 874 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 874
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 874 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 874 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 874
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 874 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 874
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 874
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 874 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 874 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 877 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 877
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 877 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m2"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 889 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(2)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 895
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 895 3952 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 895 3952 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 2
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 899
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 899 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 899 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 902
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 902 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 902 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 911 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 914 3944 MOD
   [enerjc] *** EXPAX_AST: tree = (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(k0__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()) % (enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(2), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 924
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(j0__REF__, false, Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 924
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 924
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 924 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 924 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 927 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 927
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 927 0 IDENT
   [enerjc] *** EXPAX_AST: tree = j0__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 930
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 930 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 930 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 930 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 930
   [enerjc] *** EXPAX_GEN: tree.getTag() = MOD
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 930
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 930 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 930
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 930
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 930 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 930 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 933 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = jseed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 933
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 933 0 IDENT
   [enerjc] *** EXPAX_AST: tree = jseed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 944 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 947
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 947 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 947
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 947
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 947 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 947 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 950 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 950
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 950 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m2"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 962 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 965 3970 MOD
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(jseed__REF__, false)).intValue() % ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 975
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 975
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 975 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 975
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 975
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 975 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 975 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 978 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 978
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 978
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 978 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 978 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 981 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 981
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 981 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 990
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 990 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 990
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 990
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 990 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 990 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 993 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = iloop__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = iloop__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 993
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 993 0 IDENT
   [enerjc] *** EXPAX_AST: tree = iloop__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1004 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1008
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1008 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1008 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1008 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1008
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1008
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1008
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1008 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1008 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1011 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1011
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1011 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1011 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1011
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1011 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1011
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1011
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1011 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1011 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1014 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j0__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1014
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1014 0 IDENT
   [enerjc] *** EXPAX_AST: tree = j0__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1025 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1031
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1031 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1031 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1031
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1031
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1031
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1031 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1031 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1034 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1034
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1034 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1034 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1034
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1034 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1034
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1034
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1034 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1034 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1037 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1037
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1037 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "m2"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1049 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1055
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1055 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1055 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1055
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1055 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1055
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1055
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1055 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1055 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1058 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = j1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = j1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1058
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1058 0 IDENT
   [enerjc] *** EXPAX_AST: tree = j1__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1069 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1075
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1075 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1075 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1078
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1078 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1078 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1087 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1093
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1093 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1093 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1096
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1096 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1096 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1105 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1119 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadField(this, "m", false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(iloop__REF__, false)).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j0__REF__, false)).intValue()), Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(this, "m2", false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(j1__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1123
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(iloop__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1123
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1123
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1123 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1123 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1126 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = iloop__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = iloop__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1126
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1126 0 IDENT
   [enerjc] *** EXPAX_AST: tree = iloop__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1128
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1128 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1128 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1131
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1131 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1131 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1136
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1136 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1136 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1149
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1149
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1149 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1149
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1149
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1149 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1149 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1152 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1152
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1152 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "i"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)4)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)4)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1156
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1156 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1156 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)4
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1168 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "i", false, Integer.valueOf((int)4))).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1172
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1172
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1172 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1172
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1172
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1172 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1172 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1175 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1175
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1175 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "j"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)16)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)16)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1179
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1179 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1179 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)16
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.Random initialize(int) void 1192 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeField(this, "j", false, Integer.valueOf((int)16))).intValue
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax/apps/smm-enerj/build/jnt/scimark2/Random.class]]
   [enerjc] [checking jnt.scimark2.SparseCompRow]
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] *** EXPAX_RPT: ENERJ
   [enerjc] *** EXPAX_RPT: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = jnt.scimark2.SparseCompRow
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public static void matmult(@Approx()
   [enerjc] double[] y, @Approx()
   [enerjc] double[] val, int[] row, int[] col, @Approx()
   [enerjc] double[] x, int NUM_ITERATIONS) {
   [enerjc]     int M = row.length - 1;
   [enerjc]     for (int reps = 0; reps < NUM_ITERATIONS; reps++) {
   [enerjc]         for (int r = 0; r < M; r++) {
   [enerjc]             @Approx()
   [enerjc]             double sum = 0.0;
   [enerjc]             int rowR = row[r];
   [enerjc]             int rowRp1 = row[r + 1];
   [enerjc]             for (int i = rowR; i < rowRp1; i++) sum += x[col[i]] * val[i];
   [enerjc]             y[r] = sum;
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to matmult(double[],double[],int[],int[],double[],int)
   [enerjc] *** EXPAX_ST: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitSelect: tree = jnt.scimark2
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: visitIdent: tree = jnt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: lvalues contains = jnt.scimark2
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang.*
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.lang)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.lang)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang.*
   [enerjc] *** EXPAX_PRT: class name is changed to = jnt.scimark2.SparseCompRow
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static void matmult(@Approx()
   [enerjc] double[] y, @Approx()
   [enerjc] double[] val, int[] row, int[] col, @Approx()
   [enerjc] double[] x, int NUM_ITERATIONS) {
   [enerjc]     int M = row.length - 1;
   [enerjc]     for (int reps = 0; reps < NUM_ITERATIONS; reps++) {
   [enerjc]         for (int r = 0; r < M; r++) {
   [enerjc]             @Approx()
   [enerjc]             double sum = 0.0;
   [enerjc]             int rowR = row[r];
   [enerjc]             int rowRp1 = row[r + 1];
   [enerjc]             for (int i = rowR; i < rowRp1; i++) sum += x[col[i]] * val[i];
   [enerjc]             y[r] = sum;
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to matmult(double[],double[],int[],int[],double[],int)
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] y
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] y
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] val
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] val
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] row
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] row
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] col
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] col
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_PRT: createNewInitializer = int NUM_ITERATIONS
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int NUM_ITERATIONS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] y
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] val
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = val
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] row
   [enerjc] *** EXPAX_ST: visitVarDef: type = int[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = row
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] col
   [enerjc] *** EXPAX_ST: visitVarDef: type = int[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = col
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] x
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = x
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int NUM_ITERATIONS
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = NUM_ITERATIONS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int M = row.length - 1
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M = row.length - 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> NUM_ITERATIONS__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(NUM_ITERATIONS, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = NUM_ITERATIONS__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(NUM_ITERATIONS, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> x__REF__ = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = x__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> col__REF__ = new <int[]>enerj.rt.Reference<int[]>(col, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<int[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = col__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <int[]>enerj.rt.Reference<int[]>(col, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> row__REF__ = new <int[]>enerj.rt.Reference<int[]>(row, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<int[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = row__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <int[]>enerj.rt.Reference<int[]>(row, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> val__REF__ = new <double[]>enerj.rt.Reference<double[]>(val, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = val__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(val, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> y__REF__ = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = y__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int M = row.length - 1
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = row.length - 1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MINUS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MINUS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MINUS
   [enerjc] *** EXPAX_PRT: approx is false = row.length - 1
   [enerjc] *** EXPAX_ST: visitBinary: tree = row.length - 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MINUS
   [enerjc] *** EXPAX_ST: kind = MINUS
   [enerjc] *** EXPAX_ST: visitSelect: tree = row.length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=row.length)
   [enerjc] *** EXPAX_ST: visitIdent: tree = row
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = row
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false).length)
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int M = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false).length, 1, enerj.rt.PrecisionRuntime.ArithOperator.MINUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> M__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = M__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int reps = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int reps = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int reps = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = reps
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int reps = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> reps__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(reps, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = reps__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(reps, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = reps < NUM_ITERATIONS
   [enerjc] *** EXPAX_ST: visitBinary: tree = reps < NUM_ITERATIONS
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: visitIdent: tree = reps
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = reps
   [enerjc] *** EXPAX_ST: visitIdent: tree = NUM_ITERATIONS
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = NUM_ITERATIONS
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = reps++
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = reps
   [enerjc] *** EXPAX_ST: visitIdent: tree = reps
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = reps
   [enerjc] *** EXPAX_PRT: createNewInitializer = int r = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int r = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int r = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = r
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int r = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> r__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(r, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = r__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(r, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = r < M
   [enerjc] *** EXPAX_ST: visitBinary: tree = r < M
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: visitIdent: tree = M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = M
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = r++
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double sum = 0.0
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double sum = 0.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 1
   [enerjc] *** EXPAX_PRT: createNewInitializer = int rowR = row[r]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int rowR = row[r]
   [enerjc] *** EXPAX_PRT: createNewInitializer = int rowRp1 = row[r + 1]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int rowRp1 = row[r + 1]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double sum = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = sum
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DOUBLE_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = VARDEF
   [enerjc] *** EXPAX_PRT: approx is true = @Approx()
   [enerjc] double sum = 0.0
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 2
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(storeCall) - @Approx()
   [enerjc] double sum = 0.0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<java.lang.Double> sum__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(sum, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = sum__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(sum, true, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int rowR = row[r]
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = rowR
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = row[r]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIndexed: tree = row[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=row[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = row
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = row
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int rowR = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(rowR, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = rowR__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(rowR, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int rowRp1 = row[r + 1]
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = rowRp1
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = row[r + 1]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIndexed: tree = row[r + 1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=row[r + 1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = row
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = row
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = r + 1
   [enerjc] *** EXPAX_ST: visitBinary: tree = r + 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int rowRp1 = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue(), false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(rowRp1, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = rowRp1__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(rowRp1, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = rowR
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = rowR
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = rowR
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = rowR
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = IDENTIFIER
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = IDENT
   [enerjc] *** EXPAX_ST: visitIdent: tree = rowR
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rowR
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < rowRp1
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < rowRp1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = rowRp1
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rowRp1
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssignop: tree = sum += x[col[i]] * val[i]
   [enerjc] *** EXPAX_ST: call isApprox - visitAssignop
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = sum
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 3
   [enerjc] *** EXPAX_ST: visitIdent: tree = sum
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = MUL
   [enerjc] *** EXPAX_PRT: approx is true = x[col[i]] * val[i]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 4
   [enerjc] *** EXPAX_ST: visitBinary: tree = x[col[i]] * val[i]
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: visitIndexed: tree = x[col[i]]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=x[col[i]])
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitIndexed: tree = col[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 2(node=col[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = col
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = col
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 5
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(SELECT) - enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false).intValue()]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = val[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=val[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = val
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = val
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 6
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(SELECT) - enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(BINARY) - enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false).intValue(), true).doubleValue() * enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), true).doubleValue()
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = sum
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 7
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(assignopCall) - sum__REF__.value += enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), true).doubleValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_ST: visitAssign: tree = y[r] = sum
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = y[r]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 8
   [enerjc] *** EXPAX_ST: visitIndexed: tree = y[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=y[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitIdent: tree = sum
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = IDENT
   [enerjc] *** EXPAX_PRT: approx is true = sum
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 9
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(IDENT) - sum
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(ASSIGN) - enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true).doubleValue()
   [enerjc] *** EXPAX_GEN: class name is changed to = jnt.scimark2.SparseCompRow
   [enerjc] *** EXPAX_RPT: method name is changed to = initialize(int)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1197
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = SparseCompRow()
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = <init>
   [enerjc] *** EXPAX_GEN: flatname = <init>
   [enerjc] *** EXPAX_GEN: qname = <init>
   [enerjc] *** EXPAX_GEN: sname<init>
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to <init>()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super()
   [enerjc] *** EXPAX_GEN: visitApply = super()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 0
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow <init>() void 0 52 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow <init>() void 1 52 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 4
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow <init>() void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow <init>() void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow <init>() void 7 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 7
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow <init>() void 7 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public static void matmult(@Approx()
   [enerjc] double[] y, @Approx()
   [enerjc] double[] val, int[] row, int[] col, @Approx()
   [enerjc] double[] x, int NUM_ITERATIONS) {
   [enerjc]     enerj.rt.Reference NUM_ITERATIONS__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false);
   [enerjc]     enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false);
   [enerjc]     enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false);
   [enerjc]     int M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true);
   [enerjc]     for (int reps = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), reps__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]             @Approx()
   [enerjc]             double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]             @Approx()
   [enerjc]             enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]             int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]             enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]             int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]             enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]             for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]             ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 15
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public static void matmult(@Approx()
   [enerjc] double[] y, @Approx()
   [enerjc] double[] val, int[] row, int[] col, @Approx()
   [enerjc] double[] x, int NUM_ITERATIONS) {
   [enerjc]     enerj.rt.Reference NUM_ITERATIONS__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false);
   [enerjc]     enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false);
   [enerjc]     enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false);
   [enerjc]     int M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true);
   [enerjc]     for (int reps = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), reps__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]             @Approx()
   [enerjc]             double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]             @Approx()
   [enerjc]             enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]             int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]             enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]             int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]             enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]             for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]             ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = matmult(double[],double[],int[],int[],double[],int)
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public static void matmult(@Approx()
   [enerjc] double[] y, @Approx()
   [enerjc] double[] val, int[] row, int[] col, @Approx()
   [enerjc] double[] x, int NUM_ITERATIONS) {
   [enerjc]     enerj.rt.Reference NUM_ITERATIONS__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false);
   [enerjc]     enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false);
   [enerjc]     enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false);
   [enerjc]     int M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true);
   [enerjc]     for (int reps = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), reps__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]             @Approx()
   [enerjc]             double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]             @Approx()
   [enerjc]             enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]             int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]             enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]             int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]             enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]             for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]             ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = matmult
   [enerjc] *** EXPAX_GEN: flatname = matmult
   [enerjc] *** EXPAX_GEN: qname = matmult
   [enerjc] *** EXPAX_GEN: snamematmult
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to matmult(double[],double[],int[],int[],double[],int)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     enerj.rt.Reference NUM_ITERATIONS__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false);
   [enerjc]     enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false);
   [enerjc]     enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false);
   [enerjc]     int M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true);
   [enerjc]     for (int reps = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), reps__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]             @Approx()
   [enerjc]             double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]             @Approx()
   [enerjc]             enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]             int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]             enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]             int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]             enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]             for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]             ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     enerj.rt.Reference NUM_ITERATIONS__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false);
   [enerjc]     enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false);
   [enerjc]     enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false);
   [enerjc]     int M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true);
   [enerjc]     for (int reps = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), reps__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]             @Approx()
   [enerjc]             double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]             @Approx()
   [enerjc]             enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]             int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]             enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]             int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]             enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]             for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]             ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc]         }
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference NUM_ITERATIONS__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference NUM_ITERATIONS__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 0 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(NUM_ITERATIONS)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(NUM_ITERATIONS)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = NUM_ITERATIONS
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = NUM_ITERATIONS
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 4 0 IDENT
   [enerjc] *** EXPAX_AST: tree = NUM_ITERATIONS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 14 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference NUM_ITERATIONS__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(NUM_ITERATIONS), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 16
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 16 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = x
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = x
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 20
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 20 0 IDENT
   [enerjc] *** EXPAX_AST: tree = x
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 27 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 29
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 29 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = col
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = col
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 33
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 33 0 IDENT
   [enerjc] *** EXPAX_AST: tree = col
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 39 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 41
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 41 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = row
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = row
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 45
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 45 0 IDENT
   [enerjc] *** EXPAX_AST: tree = row
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 51 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 53
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 53 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = val
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = val
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 57 0 IDENT
   [enerjc] *** EXPAX_AST: tree = val
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 63 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 65
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 65 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = y
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = y
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 69
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 69 0 IDENT
   [enerjc] *** EXPAX_AST: tree = y
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 75 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 77
   [enerjc] *** EXPAX_GEN: visitVarDef = int M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 77 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 77
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 77 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 77
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 77
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 77 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 77 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 80 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 80 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 80
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 80 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 80 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 80
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 80
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 80
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 80 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 80 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 83 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 83 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 83 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 83 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 83
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 83 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 83 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 86 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 86
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 86 0 IDENT
   [enerjc] *** EXPAX_AST: tree = row__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#5
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 97 667 SELECT
   [enerjc] *** EXPAX_AST: tree = ((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 101
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 101 677 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 101 677 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 105
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 105 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 105 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MINUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 108
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 108 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 108 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 117 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 124
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 124 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 124 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 135 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 138 660 VARDEF
   [enerjc] *** EXPAX_AST: tree = int M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)).length), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.MINUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 140
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 140 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(M)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(M)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 144
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 144 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 144 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = M
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = M
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 144
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 144 0 IDENT
   [enerjc] *** EXPAX_AST: tree = M
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 154 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(M), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = for (int reps = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), reps__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]     for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         @Approx()
   [enerjc]         double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]         @Approx()
   [enerjc]         enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]         int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]         int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]         for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]         ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 156
   [enerjc] *** EXPAX_GEN: visitForLoop = for (int reps = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), reps__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]     for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         @Approx()
   [enerjc]         double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]         @Approx()
   [enerjc]         enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]         int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]         int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]         for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]         ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int reps = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 156
   [enerjc] *** EXPAX_GEN: visitVarDef = int reps = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 156 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 156
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 156 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 156
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 156
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 156 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 156 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 159 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 159 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 159
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 159 697 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 159 697 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 164
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 164 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 175 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 178 692 VARDEF
   [enerjc] *** EXPAX_AST: tree = int reps = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference reps__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 180
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference reps__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 180 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(reps)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(reps)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 184
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 184 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 184 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = reps
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = reps
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 184
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 184 0 IDENT
   [enerjc] *** EXPAX_AST: tree = reps
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 194 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference reps__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(reps), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 196
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 196 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 196
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 196
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 196 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 196 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 199 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 199
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 199 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 199 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 199
   [enerjc] *** EXPAX_GEN: tree.getTag() = LT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 199
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 199 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 199
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 199
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 199 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 199 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 202 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = reps__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = reps__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 202
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 202 0 IDENT
   [enerjc] *** EXPAX_AST: tree = reps__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 213 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 216
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 216 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 216
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 216
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 216 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 216 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 219 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = NUM_ITERATIONS__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = NUM_ITERATIONS__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 219
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 219 0 IDENT
   [enerjc] *** EXPAX_AST: tree = NUM_ITERATIONS__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 230 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 233 704 LT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 252 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(reps__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(NUM_ITERATIONS__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         @Approx()
   [enerjc]         double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]         @Approx()
   [enerjc]         enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]         int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]         int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]         for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]         ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 258
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         @Approx()
   [enerjc]         double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]         @Approx()
   [enerjc]         enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]         int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]         int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]         for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]         ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc]     }
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]     @Approx()
   [enerjc]     double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]     int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]     int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 258
   [enerjc] *** EXPAX_GEN: visitForLoop = for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]     @Approx()
   [enerjc]     double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]     int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]     int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 258
   [enerjc] *** EXPAX_GEN: visitVarDef = int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 258 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 258
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 258 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 258
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 258
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 258 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 258 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 261 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 261 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 261
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 261 748 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 261 748 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 266
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 266 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 266 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 277 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 280 746 VARDEF
   [enerjc] *** EXPAX_AST: tree = int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 282
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 282 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(r)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(r)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 286
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 286 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 286 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 286
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 286 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 296 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 298
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 298 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 298
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 298
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 298 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 298 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 301 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 301
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 301 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 301 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 301
   [enerjc] *** EXPAX_GEN: tree.getTag() = LT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 301
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 301 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 301
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 301
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 301 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 301 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 304 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 304
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 304 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 315 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 318
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 318 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 318
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 318
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 318 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 318 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 321 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = M__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = M__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 321
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 321 0 IDENT
   [enerjc] *** EXPAX_AST: tree = M__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 332 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 335 752 LT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 354 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(M__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     @Approx()
   [enerjc]     double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]     int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]     int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 360
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     @Approx()
   [enerjc]     double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true);
   [enerjc]     int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true);
   [enerjc]     int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true);
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc]     ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 360
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 360 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 360
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 360 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 360
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 360
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 360 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 360 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 363 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 363 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(0.0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 363
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 363 791 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 363 791 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0.0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 368
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 368 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 368 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 379 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 382 785 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] double sum = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(0.0), true, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 384
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 384 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(sum)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(sum)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 388
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 388 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 388 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = sum
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = sum
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 388
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 388 0 IDENT
   [enerjc] *** EXPAX_AST: tree = sum
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 398 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] enerj.rt.Reference sum__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(sum), true, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 400
   [enerjc] *** EXPAX_GEN: visitVarDef = int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 400 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 400
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 400 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 400
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 400
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 400 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 400 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 403 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 403 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 403
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 403 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 403 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 403
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 403 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 403
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 403
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 403 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 403 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 406 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 406
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 406
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 406 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 406 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 409 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 409
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 409 0 IDENT
   [enerjc] *** EXPAX_AST: tree = row__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 417
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 417 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 417
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 417
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 417 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 417 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 420 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 420
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 420 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 431 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 443 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 450
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 450 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 450 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 461 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 464 805 VARDEF
   [enerjc] *** EXPAX_AST: tree = int rowR = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 466
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 466 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(rowR)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(rowR)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 470
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 470 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 470 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = rowR
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = rowR
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 470
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 470 0 IDENT
   [enerjc] *** EXPAX_AST: tree = rowR
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 480 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference rowR__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowR), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 482
   [enerjc] *** EXPAX_GEN: visitVarDef = int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 482 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 482
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 482 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 482
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 482
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 482 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 482 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 485 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 485 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 485
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 485 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 485 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 485
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 485 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 485
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 485
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 485 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 485 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 488 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 488
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 488
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 488 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 488 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 491 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 491
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 491 0 IDENT
   [enerjc] *** EXPAX_AST: tree = row__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 499
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 499
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 499
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 499 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 499 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 502 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 502
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 502 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 502 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 502
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 502 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 502
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 502
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 502 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 502 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 505 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 505
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 505 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 516 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 522
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 522 843 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 522 843 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 526
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 526 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 526 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 529
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 529 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 529 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 538 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 550 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 557
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 557 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 557 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 568 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 571 828 VARDEF
   [enerjc] *** EXPAX_AST: tree = int rowRp1 = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 573
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 573 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(rowRp1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(rowRp1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 577
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 577 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 577 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = rowRp1
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = rowRp1
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 577
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 577 0 IDENT
   [enerjc] *** EXPAX_AST: tree = rowRp1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 587 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference rowRp1__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowRp1), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 589
   [enerjc] *** EXPAX_GEN: visitForLoop = for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 589
   [enerjc] *** EXPAX_GEN: visitVarDef = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 589 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 589
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 589 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 589
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 589
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 589 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 589 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 592 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 592 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 592
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 592 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 592 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 592
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 592 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 592
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 592
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 592 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 592 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 595 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = rowR__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = rowR__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 595
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 595 0 IDENT
   [enerjc] *** EXPAX_AST: tree = rowR__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 606 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 613
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 613 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 613 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 624 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 627 860 VARDEF
   [enerjc] *** EXPAX_AST: tree = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowR__REF__, false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 629
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 629 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(i)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(i)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 633
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 633 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 633 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 633
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 633 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 643 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 645
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 645 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 645
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 645
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 645 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 645 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 648 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 648
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 648 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 648 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 648
   [enerjc] *** EXPAX_GEN: tree.getTag() = LT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 648
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 648 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 648
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 648
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 648 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 648 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 651 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 651
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 651 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 662 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 665
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 665 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 665
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 665
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 665 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 665 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 668 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = rowRp1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = rowRp1__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 668
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 668 0 IDENT
   [enerjc] *** EXPAX_AST: tree = rowRp1__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 679 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 682 869 LT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 701 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowRp1__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 707
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(sum__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()), false, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 707
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 707
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 707 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 707 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 710 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = sum__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = sum__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 710
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 710 0 IDENT
   [enerjc] *** EXPAX_AST: tree = sum__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 712
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 712 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 712 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 715
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 715 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 715 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 715
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 715
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 715
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 715 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 715 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 718 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 718
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 718 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 718 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 718
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 718 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 718
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 718
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 718 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 718 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 721 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 721
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 721
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 721 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 721 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 724 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = x__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = x__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 724
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 724 0 IDENT
   [enerjc] *** EXPAX_AST: tree = x__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 732
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 732 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 732
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 732
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 732 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 732 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 735 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 735
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 735
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 735 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 735 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 738 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = col__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = col__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 738
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 738 0 IDENT
   [enerjc] *** EXPAX_AST: tree = col__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 746
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 746 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 746
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 746
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 746 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 746 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 749 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 749
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 749 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 760 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 772 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 784 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 790
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 790 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 790 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 790
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 790 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 790
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 790
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 790 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 790 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 793 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 793
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 793
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 793 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 793 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 796 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = val__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = val__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 796
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 796 0 IDENT
   [enerjc] *** EXPAX_AST: tree = val__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 804
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 804 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 804
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 804
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 804 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 804 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 807 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 807
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 807 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 818 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 830 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 836
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 836 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 836 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 839
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 839 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 839 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 848 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).intValue(), true)).doubleValue()), Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true)).doubleValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.DOUBLE, true).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 855
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 855 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 855 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.DOUBLE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 865
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 865
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 865
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 865 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 865 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 868 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 868
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 868 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 870
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 870 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 870 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 873
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 873 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 873 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 878
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 878 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 878 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 891
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 891
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 891 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 891
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 891
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 891 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 891 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 894 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 894
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 894
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 894 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 894 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 897 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = y__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = y__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 897
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 897 0 IDENT
   [enerjc] *** EXPAX_AST: tree = y__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 905
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 905 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 905
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 905
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 905 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 905 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 908 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 908
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 908 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 919 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 923
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 923 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 923 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 923 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 923
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 923 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 923
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 923
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 923 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 923 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 926 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = sum__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = sum__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 926
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 926 0 IDENT
   [enerjc] *** EXPAX_AST: tree = sum__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 937 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 951 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), true, Double.valueOf((double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(sum__REF__, true)).doubleValue()))).doubleValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 955
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 955
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 955
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 955 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 955 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 958 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 958
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 958 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 960
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 960 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 960 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 963
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 963 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 963 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 968
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 968 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 968 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 981
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(reps__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 981
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 981
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 981 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 981 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 984 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = reps__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = reps__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 984
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 984 0 IDENT
   [enerjc] *** EXPAX_AST: tree = reps__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 986
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 986 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 986 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 989
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 989 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 989 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 994
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 994 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.SparseCompRow matmult(double[],double[],int[],int[],double[],int) void 994 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax/apps/smm-enerj/build/jnt/scimark2/SparseCompRow.class]]
   [enerjc] [checking jnt.scimark2.commandline]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/RuntimeException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Throwable.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Exception.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Error.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/NumberFormatException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/IllegalArgumentException.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Thread.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Class.class)]]
   [enerjc] *** EXPAX_RPT: ENERJ
   [enerjc] *** EXPAX_RPT: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = jnt.scimark2.commandline
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public static void main(String[] args) {
   [enerjc]     double min_time = Constants.RESOLUTION_DEFAULT;
   [enerjc]     int Sparse_size_M = Constants.TINY_SPARSE_SIZE_M;
   [enerjc]     int Sparse_size_nz = Constants.TINY_SPARSE_SIZE_nz;
   [enerjc]     String seed = null;
   [enerjc]     if (args.length != 1) throw new RuntimeException("Error! Seed should be provided as an argument");
   [enerjc]     seed = args[0];
   [enerjc]     Random R = new Random(Integer.parseInt(seed));
   [enerjc]     kernel.measureSparseMatmult(Sparse_size_M, Sparse_size_nz, min_time, R);
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_RPT: visitNewClass = new RuntimeException("Error! Seed should be provided as an argument")
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise RuntimeException
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_RPT: visitNewClass = new Random(Integer.parseInt(seed))
   [enerjc] *** EXPAX_PC: objectSizes called - type = @Precise Random
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 0
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 1
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_ST: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitSelect: tree = jnt.scimark2
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: visitIdent: tree = jnt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: lvalues contains = jnt.scimark2
   [enerjc] *** EXPAX_PRT: class name is changed to = jnt.scimark2.commandline
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static void main(String[] args) {
   [enerjc]     double min_time = Constants.RESOLUTION_DEFAULT;
   [enerjc]     int Sparse_size_M = Constants.TINY_SPARSE_SIZE_M;
   [enerjc]     int Sparse_size_nz = Constants.TINY_SPARSE_SIZE_nz;
   [enerjc]     String seed = null;
   [enerjc]     if (args.length != 1) throw enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc]     seed = args[0];
   [enerjc]     Random R = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(seed)), Thread.currentThread());
   [enerjc]     kernel.measureSparseMatmult(Sparse_size_M, Sparse_size_nz, min_time, R);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_PRT: createNewInitializer = String[] args
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String[] args
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String[] args
   [enerjc] *** EXPAX_ST: visitVarDef: type = String[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = args
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_PRT: createNewInitializer = double min_time = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double min_time = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_PRT: createNewInitializer = int Sparse_size_M = Constants.TINY_SPARSE_SIZE_M
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int Sparse_size_M = Constants.TINY_SPARSE_SIZE_M
   [enerjc] *** EXPAX_PRT: createNewInitializer = int Sparse_size_nz = Constants.TINY_SPARSE_SIZE_nz
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int Sparse_size_nz = Constants.TINY_SPARSE_SIZE_nz
   [enerjc] *** EXPAX_PRT: createNewInitializer = String seed = null
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String seed = null
   [enerjc] *** EXPAX_PRT: createNewInitializer = Random R = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(seed)), Thread.currentThread())
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Random R = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(seed)), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String[]> args__REF__ = new <String[]>enerj.rt.Reference<String[]>(args, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<String[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = args__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <String[]>enerj.rt.Reference<String[]>(args, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double min_time = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = min_time
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Constants.RESOLUTION_DEFAULT)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Constants
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Constants.RESOLUTION_DEFAULT)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Constants.RESOLUTION_DEFAULT
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double min_time = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false).doubleValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> min_time__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(min_time, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = min_time__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(min_time, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int Sparse_size_M = Constants.TINY_SPARSE_SIZE_M
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = Sparse_size_M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = Constants.TINY_SPARSE_SIZE_M
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = Constants.TINY_SPARSE_SIZE_M
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Constants.TINY_SPARSE_SIZE_M)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Constants
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Constants.TINY_SPARSE_SIZE_M)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Constants.TINY_SPARSE_SIZE_M
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int Sparse_size_M = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> Sparse_size_M__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(Sparse_size_M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = Sparse_size_M__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(Sparse_size_M, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int Sparse_size_nz = Constants.TINY_SPARSE_SIZE_nz
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = Sparse_size_nz
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = Constants.TINY_SPARSE_SIZE_nz
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MEMBER_SELECT
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = SELECT
   [enerjc] *** EXPAX_ST: visitSelect: tree = Constants.TINY_SPARSE_SIZE_nz
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Constants.TINY_SPARSE_SIZE_nz)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Constants
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Constants.TINY_SPARSE_SIZE_nz)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = Constants.TINY_SPARSE_SIZE_nz
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int Sparse_size_nz = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> Sparse_size_nz__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(Sparse_size_nz, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = Sparse_size_nz__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(Sparse_size_nz, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = String seed = null
   [enerjc] *** EXPAX_ST: visitVarDef: type = String
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = null
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NULL_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: visitIdent: tree = String
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = String seed = null
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<String> seed__REF__ = new <String>enerj.rt.Reference<String>(seed, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<String>
   [enerjc] *** EXPAX_ST: visitVarDef: name = seed__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <String>enerj.rt.Reference<String>(seed, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = NE
   [enerjc] *** EXPAX_PRT: approx is false = args.length != 1
   [enerjc] *** EXPAX_ST: visitBinary: tree = args.length != 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = NE
   [enerjc] *** EXPAX_ST: kind = NOT_EQUAL_TO
   [enerjc] *** EXPAX_ST: visitSelect: tree = args.length
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=args.length)
   [enerjc] *** EXPAX_ST: visitIdent: tree = args
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = args
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false).length)
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation)
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = RuntimeException
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitAssign: tree = seed = args[0]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang.String
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=.java.lang.String)
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=.java.lang)
   [enerjc] *** EXPAX_ST: visitSelect: tree = .java
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=.java)
   [enerjc] *** EXPAX_ST: visitIdent: tree = 
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=.java)
   [enerjc] *** EXPAX_ST: lvalues contains = .java
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=.java.lang)
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=.java.lang.String)
   [enerjc] *** EXPAX_ST: lvalues contains = .java.lang.String
   [enerjc] *** EXPAX_ST: visitIndexed: tree = args[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=args[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = args
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = args
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[0])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)[0]
   [enerjc] *** EXPAX_ST: check oldLhs = seed
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Random R = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(seed)), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: type = Random
   [enerjc] *** EXPAX_ST: visitVarDef: name = R
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(seed)), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Random
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation)
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: visitIdent: tree = Random
   [enerjc] *** EXPAX_ST: visitSelect: tree = Integer.parseInt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Integer.parseInt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Integer
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Integer.parseInt)
   [enerjc] *** EXPAX_ST: lvalues contains = Integer.parseInt
   [enerjc] *** EXPAX_ST: visitIdent: tree = seed
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = seed
   [enerjc] *** EXPAX_ST: visitSelect: tree = Thread.currentThread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Thread
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Thread.currentThread)
   [enerjc] *** EXPAX_ST: lvalues contains = Thread.currentThread
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Random R = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread())
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Random> R__REF__ = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<Random>
   [enerjc] *** EXPAX_ST: visitVarDef: name = R__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = kernel.measureSparseMatmult
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=kernel.measureSparseMatmult)
   [enerjc] *** EXPAX_ST: visitIdent: tree = kernel
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=kernel.measureSparseMatmult)
   [enerjc] *** EXPAX_ST: lvalues contains = kernel.measureSparseMatmult
   [enerjc] *** EXPAX_ST: visitIdent: tree = Sparse_size_M
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Sparse_size_M
   [enerjc] *** EXPAX_ST: visitIdent: tree = Sparse_size_nz
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = Sparse_size_nz
   [enerjc] *** EXPAX_ST: visitIdent: tree = min_time
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = min_time
   [enerjc] *** EXPAX_ST: visitIdent: tree = R
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = R
   [enerjc] *** EXPAX_GEN: class name is changed to = jnt.scimark2.commandline
   [enerjc] *** EXPAX_RPT: method name is changed to = matmult(double[],double[],int[],int[],double[],int)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1008
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = commandline()
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = <init>
   [enerjc] *** EXPAX_GEN: flatname = <init>
   [enerjc] *** EXPAX_GEN: qname = <init>
   [enerjc] *** EXPAX_GEN: sname<init>
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to <init>()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super()
   [enerjc] *** EXPAX_GEN: visitApply = super()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 0
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline <init>() void 0 235 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline <init>() void 1 235 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 4
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline <init>() void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline <init>() void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline <init>() void 7 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 7
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline <init>() void 7 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public static void main(String[] args) {
   [enerjc]     enerj.rt.Reference args__REF__ = new <String[]>enerj.rt.Reference(args, false, false);
   [enerjc]     double min_time = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]     enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true);
   [enerjc]     int Sparse_size_M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference Sparse_size_M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true);
   [enerjc]     int Sparse_size_nz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference Sparse_size_nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true);
   [enerjc]     String seed = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference seed__REF__ = new <String>enerj.rt.Reference(seed, false, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue()) throw (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>storeLocal(seed__REF__, false, (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false));
   [enerjc]     Random R = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     kernel.measureSparseMatmult(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue(), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue(), ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false));
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 15
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public static void main(String[] args) {
   [enerjc]     enerj.rt.Reference args__REF__ = new <String[]>enerj.rt.Reference(args, false, false);
   [enerjc]     double min_time = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]     enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true);
   [enerjc]     int Sparse_size_M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference Sparse_size_M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true);
   [enerjc]     int Sparse_size_nz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference Sparse_size_nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true);
   [enerjc]     String seed = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference seed__REF__ = new <String>enerj.rt.Reference(seed, false, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue()) throw (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>storeLocal(seed__REF__, false, (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false));
   [enerjc]     Random R = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     kernel.measureSparseMatmult(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue(), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue(), ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false));
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = main(java.lang.String[])
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public static void main(String[] args) {
   [enerjc]     enerj.rt.Reference args__REF__ = new <String[]>enerj.rt.Reference(args, false, false);
   [enerjc]     double min_time = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]     enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true);
   [enerjc]     int Sparse_size_M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference Sparse_size_M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true);
   [enerjc]     int Sparse_size_nz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference Sparse_size_nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true);
   [enerjc]     String seed = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference seed__REF__ = new <String>enerj.rt.Reference(seed, false, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue()) throw (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>storeLocal(seed__REF__, false, (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false));
   [enerjc]     Random R = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     kernel.measureSparseMatmult(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue(), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue(), ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false));
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = main
   [enerjc] *** EXPAX_GEN: flatname = main
   [enerjc] *** EXPAX_GEN: qname = main
   [enerjc] *** EXPAX_GEN: snamemain
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to main(java.lang.String[])
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     enerj.rt.Reference args__REF__ = new <String[]>enerj.rt.Reference(args, false, false);
   [enerjc]     double min_time = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]     enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true);
   [enerjc]     int Sparse_size_M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference Sparse_size_M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true);
   [enerjc]     int Sparse_size_nz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference Sparse_size_nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true);
   [enerjc]     String seed = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference seed__REF__ = new <String>enerj.rt.Reference(seed, false, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue()) throw (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>storeLocal(seed__REF__, false, (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false));
   [enerjc]     Random R = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     kernel.measureSparseMatmult(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue(), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue(), ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false));
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     enerj.rt.Reference args__REF__ = new <String[]>enerj.rt.Reference(args, false, false);
   [enerjc]     double min_time = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue();
   [enerjc]     enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true);
   [enerjc]     int Sparse_size_M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference Sparse_size_M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true);
   [enerjc]     int Sparse_size_nz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference Sparse_size_nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true);
   [enerjc]     String seed = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference seed__REF__ = new <String>enerj.rt.Reference(seed, false, false);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue()) throw (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>storeLocal(seed__REF__, false, (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false));
   [enerjc]     Random R = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     kernel.measureSparseMatmult(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue(), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue(), ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false));
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference args__REF__ = new <String[]>enerj.rt.Reference(args, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference args__REF__ = new <String[]>enerj.rt.Reference(args, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <String[]>enerj.rt.Reference(args, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <String[]>enerj.rt.Reference(args, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 0 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <String[]>enerj.rt.Reference(args, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = args
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = args
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 4 0 IDENT
   [enerjc] *** EXPAX_AST: tree = args
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 10 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference args__REF__ = new <String[]>enerj.rt.Reference(args, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = double min_time = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 11
   [enerjc] *** EXPAX_GEN: visitVarDef = double min_time = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 11 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 11
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 11 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 11
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 11
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 11 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 11 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 14 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 14 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 14
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 14 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 14 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 14
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 14 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 14
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 14
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 14 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 14 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 17 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Constants.class
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Constants.class
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 17
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 20 319 SELECT
   [enerjc] *** EXPAX_AST: tree = Constants.class
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "RESOLUTION_DEFAULT"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 38
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 38 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 38 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 49 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 52 308 VARDEF
   [enerjc] *** EXPAX_AST: tree = double min_time = (double)((Double)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Double)Double.valueOf(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadField(Constants.class, "RESOLUTION_DEFAULT", false)).doubleValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).doubleValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 53
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 53 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(min_time)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(min_time)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 57 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 57 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = min_time
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = min_time
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 57
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 57 0 IDENT
   [enerjc] *** EXPAX_AST: tree = min_time
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 66 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int Sparse_size_M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 68
   [enerjc] *** EXPAX_GEN: visitVarDef = int Sparse_size_M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 68 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 68
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 68 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 68
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 68
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 68 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 68 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 71 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 71 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 71
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 71 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 71 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 71
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 71 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 71
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 71
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 71 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 71 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 74 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Constants.class
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Constants.class
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 74
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 77 372 SELECT
   [enerjc] *** EXPAX_AST: tree = Constants.class
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "TINY_SPARSE_SIZE_M"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 88 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 95
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 95 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 95 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 106 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 109 356 VARDEF
   [enerjc] *** EXPAX_AST: tree = int Sparse_size_M = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_M", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference Sparse_size_M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 111
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference Sparse_size_M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 111 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(Sparse_size_M)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(Sparse_size_M)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 115
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 115 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 115 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Sparse_size_M
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = Sparse_size_M
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 115
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 115 0 IDENT
   [enerjc] *** EXPAX_AST: tree = Sparse_size_M
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 125 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference Sparse_size_M__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_M), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int Sparse_size_nz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 127
   [enerjc] *** EXPAX_GEN: visitVarDef = int Sparse_size_nz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 127 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 127
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 127 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 127
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 127
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 127 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 127 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 130 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 130
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 130
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 130 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 130
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 130
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 130 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 133 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Constants.class
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Constants.class
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 133
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 136 425 SELECT
   [enerjc] *** EXPAX_AST: tree = Constants.class
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "TINY_SPARSE_SIZE_nz"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 147 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 154
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 154 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 154 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 165 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 168 408 VARDEF
   [enerjc] *** EXPAX_AST: tree = int Sparse_size_nz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadField(Constants.class, "TINY_SPARSE_SIZE_nz", false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference Sparse_size_nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 170
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference Sparse_size_nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 170 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(Sparse_size_nz)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(Sparse_size_nz)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 174
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 174 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 174 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Sparse_size_nz
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = Sparse_size_nz
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 174
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 174 0 IDENT
   [enerjc] *** EXPAX_AST: tree = Sparse_size_nz
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 184 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference Sparse_size_nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(Sparse_size_nz), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = String seed = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 186
   [enerjc] *** EXPAX_GEN: visitVarDef = String seed = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 186 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 186 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 186
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 186
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 186 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 186 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 189 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral - tree.toString() = null
   [enerjc] *** EXPAX_GEN: visitLiteral (bytecode offset) = 189
   [enerjc] *** EXPAX_GEN: tree.getTag() = LITERAL
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 191
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 191 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 191 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 202 466 VARDEF
   [enerjc] *** EXPAX_AST: tree = String seed = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(null, false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference seed__REF__ = new <String>enerj.rt.Reference(seed, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 204
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference seed__REF__ = new <String>enerj.rt.Reference(seed, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <String>enerj.rt.Reference(seed, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <String>enerj.rt.Reference(seed, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 204 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <String>enerj.rt.Reference(seed, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 208
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 208 0 IDENT
   [enerjc] *** EXPAX_AST: tree = seed
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 215 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference seed__REF__ = new <String>enerj.rt.Reference(seed, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue()) throw (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 217
   [enerjc] *** EXPAX_GEN: visitIf = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue()) throw (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 217
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 217 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 217
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 217
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 217 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 217 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 220 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 220
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 220 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 220 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1
   [enerjc] *** EXPAX_GEN: visitBinary = ((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 220
   [enerjc] *** EXPAX_GEN: tree.getTag() = NE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 220
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 220 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 220
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 220
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 220 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 220 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 223 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = args__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = args__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 223
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 223 0 IDENT
   [enerjc] *** EXPAX_AST: tree = args__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#5
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 233 492 SELECT
   [enerjc] *** EXPAX_AST: tree = ((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 235 500 NE
   [enerjc] *** EXPAX_AST: tree = ((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 254 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((String[])enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)).length != 1))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = throw (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc] *** EXPAX_GEN: tree.getTag() = THROW
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 260
   [enerjc] *** EXPAX_GEN: visitThrow = throw (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread());
   [enerjc] *** EXPAX_GEN: tree.getTag() = THROW
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 260 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (RuntimeException)enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread())
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0), new RuntimeException("Error! Seed should be provided as an argument"), Thread.currentThread())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 260
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 260
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 260 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 260 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 263 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 16, 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 263
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 263
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 263 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 263 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 266 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Thread.currentThread()
   [enerjc] *** EXPAX_GEN: visitApply = Thread.currentThread()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Thread.currentThread
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Thread.currentThread
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 266
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 266 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Thread.currentThread
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 266 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Thread.currentThread
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 16
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new RuntimeException("Error! Seed should be provided as an argument")
   [enerjc] *** EXPAX_GEN: visitNewClass = new RuntimeException("Error! Seed should be provided as an argument")
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 278 515 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new RuntimeException("Error! Seed should be provided as an argument")
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "Error! Seed should be provided as an argument"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Thread.currentThread()
   [enerjc] *** EXPAX_GEN: visitApply = Thread.currentThread()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Thread.currentThread
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Thread.currentThread
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 287
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Thread.currentThread
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Thread.currentThread
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>storeLocal(seed__REF__, false, (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 299
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>storeLocal(seed__REF__, false, (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>storeLocal(seed__REF__, false, (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>storeLocal(seed__REF__, false, (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 299
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 299
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 299 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 299 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 302 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 302
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 302 0 IDENT
   [enerjc] *** EXPAX_AST: tree = seed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 305 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (.java.lang.String)(String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 305 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false), 0, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 305
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 305
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 305 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 305 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 308 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String[]>loadLocal(args__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 308
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 308
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 308 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 308 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 311 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = args__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = args__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 311
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 311 0 IDENT
   [enerjc] *** EXPAX_AST: tree = args__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = Random R = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 334
   [enerjc] *** EXPAX_GEN: visitVarDef = Random R = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 334 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 334 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 334
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 334
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 334 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 334 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 337 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread())
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 337
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 337
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 337 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 337 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 340 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 340
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 340
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 340 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 340 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 343 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Thread.currentThread()
   [enerjc] *** EXPAX_GEN: visitApply = Thread.currentThread()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Thread.currentThread
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Thread.currentThread
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 343
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 343 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Thread.currentThread
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 343 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Thread.currentThread
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 69
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false)))
   [enerjc] *** EXPAX_GEN: visitNewClass = new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false)))
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 355 642 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false)))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))
   [enerjc] *** EXPAX_GEN: visitApply = Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.parseInt
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.parseInt
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 359
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 359 660 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.parseInt
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 359 660 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.parseInt
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 359 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 359
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 359
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 359 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 359 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 362 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = seed__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 362
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 362 0 IDENT
   [enerjc] *** EXPAX_AST: tree = seed__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Thread.currentThread()
   [enerjc] *** EXPAX_GEN: visitApply = Thread.currentThread()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Thread.currentThread
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Thread.currentThread
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 379
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 379 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Thread.currentThread
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 379 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Thread.currentThread
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 388
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 388 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 388 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 399 638 VARDEF
   [enerjc] *** EXPAX_AST: tree = Random R = (.jnt.scimark2.Random)(Random)enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.wrappedNew(enerj.rt.PrecisionRuntimeRoot.impl.beforeCreation(Thread.currentThread(), false, 69, 0), new Random(Integer.parseInt((String)enerj.rt.PrecisionRuntimeRoot.impl.<.java.lang.String>loadLocal(seed__REF__, false))), Thread.currentThread()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 401
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 401 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = R
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = R
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 405
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 405 0 IDENT
   [enerjc] *** EXPAX_AST: tree = R
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 412 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = kernel.measureSparseMatmult(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue(), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue(), ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 414
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = kernel.measureSparseMatmult(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue(), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue(), ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = kernel.measureSparseMatmult(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue(), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue(), ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false))
   [enerjc] *** EXPAX_GEN: visitApply = kernel.measureSparseMatmult(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue(), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue(), ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = kernel.measureSparseMatmult
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = kernel.measureSparseMatmult
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 414
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 414 686 SELECT
   [enerjc] *** EXPAX_AST: tree = kernel.measureSparseMatmult
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 414 686 SELECT
   [enerjc] *** EXPAX_AST: tree = kernel.measureSparseMatmult
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 414
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 414 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 414
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 414
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 414 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 414 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 417 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Sparse_size_M__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = Sparse_size_M__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 417
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 417 0 IDENT
   [enerjc] *** EXPAX_AST: tree = Sparse_size_M__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 428 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_M__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 431
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 431 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 431
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 431
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 431 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 431 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 434 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Sparse_size_nz__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = Sparse_size_nz__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 434
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 434 0 IDENT
   [enerjc] *** EXPAX_AST: tree = Sparse_size_nz__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 445 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(Sparse_size_nz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 448
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 448 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 448
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 448
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 448 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 448 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 451 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = min_time__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = min_time__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 451
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 451 0 IDENT
   [enerjc] *** EXPAX_AST: tree = min_time__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 462 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadLocal(min_time__REF__, false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 465 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 465
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 465
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 465 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 465 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 468 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = R__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = R__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 468
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.commandline main(java.lang.String[]) void 468 0 IDENT
   [enerjc] *** EXPAX_AST: tree = R__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax/apps/smm-enerj/build/jnt/scimark2/commandline.class]]
   [enerjc] [checking jnt.scimark2.kernel]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/System.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/PrintStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/FilterOutputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/io/OutputStream.class)]]
   [enerjc] [loading ZipFileIndexFileObject[../../enerj/build/enerj.jar(enerj/lang/Endorsements.class)]]
   [enerjc] *** EXPAX_PC: ENERJ
   [enerjc] *** EXPAX_RPT: ENERJ
   [enerjc] *** EXPAX_RPT: RuntimePrecisionTranslator start!
   [enerjc] *** EXPAX_RPT: class name is changed to = jnt.scimark2.kernel
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to <init>()
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] public static double measureSparseMatmult(int N, int nz, double min_time, Random R) {
   [enerjc]     @Approx()
   [enerjc]     double[] x = RandomVector(N, R);
   [enerjc]     @Approx()
   [enerjc]     double[] y = new double[N];
   [enerjc]     int nr = nz / N;
   [enerjc]     int anz = nr * N;
   [enerjc]     @Approx()
   [enerjc]     double[] val = RandomVector(anz, R);
   [enerjc]     int[] col = new int[anz];
   [enerjc]     int[] row = new int[N + 1];
   [enerjc]     row[0] = 0;
   [enerjc]     for (int r = 0; r < N; r++) {
   [enerjc]         int rowr = row[r];
   [enerjc]         row[r + 1] = rowr + nr;
   [enerjc]         int step = r / nr;
   [enerjc]         if (step < 1) step = 1;
   [enerjc]         for (int i = 0; i < nr; i++) col[rowr + i] = i * step;
   [enerjc]     }
   [enerjc]     int cycles = 100;
   [enerjc]     SparseCompRow.matmult(y, val, row, col, x, cycles);
   [enerjc]     System.out.print("SparseMatMult vector: ");
   [enerjc]     for (int i = 0; i < N; ++i) {
   [enerjc]         System.out.print(Endorsements.endorse(y[i]) + " ");
   [enerjc]     }
   [enerjc]     System.out.println("");
   [enerjc]     return 0.0;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to measureSparseMatmult(int,int,double,jnt.scimark2.Random)
   [enerjc] *** EXPAX_RPT: visitNewArray = new double[N]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_RPT: visitNewArray = new int[anz]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_RPT: visitNewArray = new int[N + 1]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 4
   [enerjc] *** EXPAX_RPT: tree = 
   [enerjc] @Approx()
   [enerjc] private static double[] RandomVector(int N, Random R) {
   [enerjc]     @Approx()
   [enerjc]     double[] A = new double[N];
   [enerjc]     for (int i = 0; i < N; i++) A[i] = R.nextDouble();
   [enerjc]     return A;
   [enerjc] }
   [enerjc] *** EXPAX_RPT: method name is changed to RandomVector(int,jnt.scimark2.Random)
   [enerjc] *** EXPAX_RPT: visitNewArray = new double[N]
   [enerjc] *** EXPAX_PC: typeSizes called
   [enerjc] *** EXPAX_PC: preciseSize += 8
   [enerjc] *** EXPAX_ST: SimulationTranslator start!
   [enerjc] *** EXPAX_ST: visitSelect: tree = jnt.scimark2
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: visitIdent: tree = jnt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=jnt.scimark2)
   [enerjc] *** EXPAX_ST: lvalues contains = jnt.scimark2
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang.*
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.lang)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.lang)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.lang.*)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.lang.*
   [enerjc] *** EXPAX_PRT: class name is changed to = jnt.scimark2.kernel
   [enerjc] *** EXPAX_RPT: method name is changed to =  
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to <init>()
   [enerjc] *** EXPAX_ST: visitIdent: tree = super
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor)
   [enerjc] *** EXPAX_ST: visitIdent: tree = this
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] public static double measureSparseMatmult(int N, int nz, double min_time, Random R) {
   [enerjc]     @Approx()
   [enerjc]     double[] x = RandomVector(N, R);
   [enerjc]     @Approx()
   [enerjc]     double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[N], 1, false, 8, 0);
   [enerjc]     int nr = nz / N;
   [enerjc]     int anz = nr * N;
   [enerjc]     @Approx()
   [enerjc]     double[] val = RandomVector(anz, R);
   [enerjc]     int[] col = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[anz], 1, false, 4, 0);
   [enerjc]     int[] row = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[N + 1], 1, false, 4, 0);
   [enerjc]     row[0] = 0;
   [enerjc]     for (int r = 0; r < N; r++) {
   [enerjc]         int rowr = row[r];
   [enerjc]         row[r + 1] = rowr + nr;
   [enerjc]         int step = r / nr;
   [enerjc]         if (step < 1) step = 1;
   [enerjc]         for (int i = 0; i < nr; i++) col[rowr + i] = i * step;
   [enerjc]     }
   [enerjc]     int cycles = 100;
   [enerjc]     SparseCompRow.matmult(y, val, row, col, x, cycles);
   [enerjc]     System.out.print("SparseMatMult vector: ");
   [enerjc]     for (int i = 0; i < N; ++i) {
   [enerjc]         System.out.print(Endorsements.endorse(y[i]) + " ");
   [enerjc]     }
   [enerjc]     System.out.println("");
   [enerjc]     return 0.0;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to measureSparseMatmult(int,int,double,jnt.scimark2.Random)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N
   [enerjc] *** EXPAX_PRT: createNewInitializer = int nz
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int nz
   [enerjc] *** EXPAX_PRT: createNewInitializer = double min_time
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = double min_time
   [enerjc] *** EXPAX_PRT: createNewInitializer = Random R
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Random R
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int nz
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = nz
   [enerjc] *** EXPAX_ST: visitVarDef: tree = double min_time
   [enerjc] *** EXPAX_ST: visitVarDef: type = double
   [enerjc] *** EXPAX_ST: visitVarDef: name = min_time
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Random R
   [enerjc] *** EXPAX_ST: visitVarDef: type = Random
   [enerjc] *** EXPAX_ST: visitVarDef: name = R
   [enerjc] *** EXPAX_ST: visitIdent: tree = Random
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] x = RandomVector(N, R)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] x = RandomVector(N, R)
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[N], 1, false, 8, 0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[N], 1, false, 8, 0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int nr = nz / N
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int nr = nz / N
   [enerjc] *** EXPAX_PRT: createNewInitializer = int anz = nr * N
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int anz = nr * N
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] val = RandomVector(anz, R)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] val = RandomVector(anz, R)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] col = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[anz], 1, false, 4, 0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] col = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[anz], 1, false, 4, 0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int[] row = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[N + 1], 1, false, 4, 0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] row = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[N + 1], 1, false, 4, 0)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int cycles = 100
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int cycles = 100
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Random> R__REF__ = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<Random>
   [enerjc] *** EXPAX_ST: visitVarDef: name = R__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Double> min_time__REF__ = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(min_time, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Double>
   [enerjc] *** EXPAX_ST: visitVarDef: name = min_time__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Double>enerj.rt.Reference<java.lang.Double>(min_time, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> nz__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(nz, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = nz__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(nz, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] x = RandomVector(N, R)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = x
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = RandomVector(N, R)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = RandomVector
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: visitIdent: tree = R
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = R
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] x = RandomVector(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> x__REF__ = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = x__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(x, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[N], 1, false, 8, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = y
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[N], 1, false, 8, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] y = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue()], 1, false, 8, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> y__REF__ = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = y__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(y, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int nr = nz / N
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = nr
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = nz / N
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DIVIDE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DIV
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = nz / N
   [enerjc] *** EXPAX_ST: visitBinary: tree = nz / N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: visitIdent: tree = nz
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = nz
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int nr = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> nr__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(nr, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = nr__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(nr, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int anz = nr * N
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = anz
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = nr * N
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MULTIPLY
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = MUL
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = nr * N
   [enerjc] *** EXPAX_ST: visitBinary: tree = nr * N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = nr
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = nr
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int anz = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> anz__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(anz, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = anz__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(anz, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] val = RandomVector(anz, R)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = val
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = RandomVector(anz, R)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: visitIdent: tree = RandomVector
   [enerjc] *** EXPAX_ST: visitIdent: tree = anz
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = anz
   [enerjc] *** EXPAX_ST: visitIdent: tree = R
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = R
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] val = RandomVector(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false))
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> val__REF__ = new <double[]>enerj.rt.Reference<double[]>(val, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = val__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(val, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] col = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[anz], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: type = int[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = col
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[anz], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = anz
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = anz
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] col = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false).intValue()], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> col__REF__ = new <int[]>enerj.rt.Reference<int[]>(col, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<int[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = col__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <int[]>enerj.rt.Reference<int[]>(col, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int[] row = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[N + 1], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: type = int[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = row
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[N + 1], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = N + 1
   [enerjc] *** EXPAX_ST: visitBinary: tree = N + 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int[] row = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()], 1, false, 4, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<int[]> row__REF__ = new <int[]>enerj.rt.Reference<int[]>(row, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<int[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = row__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <int[]>enerj.rt.Reference<int[]>(row, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitAssign: tree = row[0] = 0
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = row[0]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = row[0]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=row[0])
   [enerjc] *** EXPAX_ST: visitIdent: tree = row
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = row
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[0])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[0]
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[0]
   [enerjc] *** EXPAX_PRT: createNewInitializer = int r = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int r = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int r = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = r
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int r = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> r__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(r, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = r__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(r, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = r < N
   [enerjc] *** EXPAX_ST: visitBinary: tree = r < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = r++
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_PRT: createNewInitializer = int rowr = row[r]
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int rowr = row[r]
   [enerjc] *** EXPAX_PRT: createNewInitializer = int step = r / nr
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int step = r / nr
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int rowr = row[r]
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = rowr
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = row[r]
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = ARRAY_ACCESS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INDEXED
   [enerjc] *** EXPAX_ST: visitIndexed: tree = row[r]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=row[r])
   [enerjc] *** EXPAX_ST: visitIdent: tree = row
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = row
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int rowr = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(rowr, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = rowr__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(rowr, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitAssign: tree = row[r + 1] = rowr + nr
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = row[r + 1]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = row[r + 1]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=row[r + 1])
   [enerjc] *** EXPAX_ST: visitIdent: tree = row
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = row
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = r + 1
   [enerjc] *** EXPAX_ST: visitBinary: tree = r + 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = rowr + nr
   [enerjc] *** EXPAX_ST: visitBinary: tree = rowr + nr
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = rowr
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rowr
   [enerjc] *** EXPAX_ST: visitIdent: tree = nr
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = nr
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), 1, enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int step = r / nr
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = step
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = r / nr
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DIVIDE
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = DIV
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = DIV
   [enerjc] *** EXPAX_PRT: approx is false = r / nr
   [enerjc] *** EXPAX_ST: visitBinary: tree = r / nr
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = DIV
   [enerjc] *** EXPAX_ST: kind = DIVIDE
   [enerjc] *** EXPAX_ST: visitIdent: tree = r
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = r
   [enerjc] *** EXPAX_ST: visitIdent: tree = nr
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = nr
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int step = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> step__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(step, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = step__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(step, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = step < 1
   [enerjc] *** EXPAX_ST: visitBinary: tree = step < 1
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: visitIdent: tree = step
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = step
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitAssign: tree = step = 1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = step
   [enerjc] *** EXPAX_ST: visitIdent: tree = step
   [enerjc] *** EXPAX_ST: check oldLhs = step
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < nr
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < nr
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = nr
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = nr
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = col[rowr + i] = i * step
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = col[rowr + i]
   [enerjc] *** EXPAX_ST: visitIndexed: tree = col[rowr + i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=col[rowr + i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = col
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = col
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = rowr + i
   [enerjc] *** EXPAX_ST: visitBinary: tree = rowr + i
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: visitIdent: tree = rowr
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = rowr
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = MUL
   [enerjc] *** EXPAX_PRT: approx is false = i * step
   [enerjc] *** EXPAX_ST: visitBinary: tree = i * step
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = MUL
   [enerjc] *** EXPAX_ST: kind = MULTIPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = step
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = step
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false).intValue(), enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue(), enerj.rt.PrecisionRuntime.ArithOperator.PLUS, enerj.rt.PrecisionRuntime.NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int cycles = 100
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = cycles
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 100
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int cycles = 100
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> cycles__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(cycles, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = cycles__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(cycles, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitSelect: tree = SparseCompRow.matmult
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=SparseCompRow.matmult)
   [enerjc] *** EXPAX_ST: visitIdent: tree = SparseCompRow
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=SparseCompRow.matmult)
   [enerjc] *** EXPAX_ST: lvalues contains = SparseCompRow.matmult
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = val
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = val
   [enerjc] *** EXPAX_ST: visitIdent: tree = row
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = row
   [enerjc] *** EXPAX_ST: visitIdent: tree = col
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = col
   [enerjc] *** EXPAX_ST: visitIdent: tree = x
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = x
   [enerjc] *** EXPAX_ST: visitIdent: tree = cycles
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = cycles
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.print
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=System.out.print)
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=System.out)
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=System.out)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false).print)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < N
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = ++i
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.print
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=System.out.print)
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=System.out)
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=System.out)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false).print)
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = PLUS
   [enerjc] *** EXPAX_PRT: approx is false = Endorsements.endorse(y[i]) + " "
   [enerjc] *** EXPAX_ST: visitBinary: tree = Endorsements.endorse(y[i]) + " "
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = PLUS
   [enerjc] *** EXPAX_ST: kind = PLUS
   [enerjc] *** EXPAX_ST: visitSelect: tree = Endorsements.endorse
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=Endorsements.endorse)
   [enerjc] *** EXPAX_ST: visitIdent: tree = Endorsements
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=Endorsements.endorse)
   [enerjc] *** EXPAX_ST: lvalues contains = Endorsements.endorse
   [enerjc] *** EXPAX_ST: visitIndexed: tree = y[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=y[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = y
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = y
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: call isApprox - visitIndexed
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = INDEXED
   [enerjc] *** EXPAX_PRT: approx is false = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out.println
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=System.out.println)
   [enerjc] *** EXPAX_ST: visitSelect: tree = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=System.out)
   [enerjc] *** EXPAX_ST: visitIdent: tree = System
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=System.out)
   [enerjc] *** EXPAX_ST: call isApprox - visitSelect
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = SELECT
   [enerjc] *** EXPAX_PRT: approx is false = System.out
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false).println)
   [enerjc] *** EXPAX_PRT method = 
   [enerjc] @Approx()
   [enerjc] private static double[] RandomVector(int N, Random R) {
   [enerjc]     @Approx()
   [enerjc]     double[] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[N], 1, false, 8, 0);
   [enerjc]     for (int i = 0; i < N; i++) A[i] = R.nextDouble();
   [enerjc]     return A;
   [enerjc] }
   [enerjc] *** EXPAX_PRT: method name is changed to RandomVector(int,jnt.scimark2.Random)
   [enerjc] *** EXPAX_PRT: createNewInitializer = int N
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int N
   [enerjc] *** EXPAX_PRT: createNewInitializer = Random R
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = Random R
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int N
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = N
   [enerjc] *** EXPAX_ST: visitVarDef: tree = Random R
   [enerjc] *** EXPAX_ST: visitVarDef: type = Random
   [enerjc] *** EXPAX_ST: visitVarDef: name = R
   [enerjc] *** EXPAX_ST: visitIdent: tree = Random
   [enerjc] *** EXPAX_PRT: createNewInitializer = @Approx()
   [enerjc] double[] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[N], 1, false, 8, 0)
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[N], 1, false, 8, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<Random> R__REF__ = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<Random>
   [enerjc] *** EXPAX_ST: visitVarDef: name = R__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <Random>enerj.rt.Reference<Random>(R, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> N__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = N__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(N, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] double[] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[N], 1, false, 8, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: type = double[]
   [enerjc] *** EXPAX_ST: visitVarDef: name = A
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[N], 1, false, 8, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = METHOD_INVOCATION
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = APPLY
   [enerjc] *** EXPAX_ST: visitIdent: tree = Approx
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 2(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt.PrecisionRuntimeRoot
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 3(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: visitSelect: tree = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 4(node=enerj.rt)
   [enerjc] *** EXPAX_ST: visitIdent: tree = enerj
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 3(node=enerj.rt)
   [enerjc] *** EXPAX_ST: lvalues contains = enerj.rt
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 2(node=enerj.rt.PrecisionRuntimeRoot)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 1(node=enerj.rt.PrecisionRuntimeRoot.impl)
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.newArray)
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = @Approx()
   [enerjc] double[] A = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false).intValue()], 1, false, 8, 0)
   [enerjc] *** EXPAX_ST: visitVarDef: tree = @Approx()
   [enerjc] enerj.rt.Reference<double[]> A__REF__ = new <double[]>enerj.rt.Reference<double[]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<double[]>
   [enerjc] *** EXPAX_ST: visitVarDef: name = A__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <double[]>enerj.rt.Reference<double[]>(A, false, false)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_PRT: createNewInitializer = int i = 0
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: type = int
   [enerjc] *** EXPAX_ST: visitVarDef: name = i
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = INT_LITERAL
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = LITERAL
   [enerjc] *** EXPAX_ST: call isApprox  - storeCall
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = VARDEF
   [enerjc] *** EXPAX_PRT: approx is false = int i = 0
   [enerjc] *** EXPAX_ST: visitVarDef: tree = enerj.rt.Reference<java.lang.Integer> i__REF__ = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: type = enerj.rt.Reference<java.lang.Integer>
   [enerjc] *** EXPAX_ST: visitVarDef: name = i__REF__
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = new <java.lang.Integer>enerj.rt.Reference<java.lang.Integer>(i, false, true)
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEW_CLASS
   [enerjc] *** EXPAX_ST: visitVarDef: tree.rhs = NEWCLASS
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = LT
   [enerjc] *** EXPAX_PRT: approx is false = i < N
   [enerjc] *** EXPAX_ST: visitBinary: tree = i < N
   [enerjc] *** EXPAX_ST: call isApprox - visitBinary
   [enerjc] *** EXPAX_ST: tag = LT
   [enerjc] *** EXPAX_ST: kind = LESS_THAN
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = N
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = N
   [enerjc] *** EXPAX_ST: ident end?
   [enerjc] *** EXPAX_ST: visitUnary: tree = i++
   [enerjc] *** EXPAX_ST: call isApprox - visitUnary
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - assignopCall #1
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: visitAssign: tree = A[i] = R.nextDouble()
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is true = INDEXED
   [enerjc] *** EXPAX_PRT: approx is true = A[i]
   [enerjc] *** EXPAX_PRT: isApprox return true: count = 1
   [enerjc] *** EXPAX_ST: visitIndexed: tree = A[i]
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag INCREASE = 1(node=A[i])
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_ST: visitIdent: tree = i
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = i
   [enerjc] *** EXPAX_ST: (visitIndexed) arrayAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()])
   [enerjc] *** EXPAX_ST: lvalues contains enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_ST: visitSelect: tree = R.nextDouble
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag INCREASE = 1(node=R.nextDouble)
   [enerjc] *** EXPAX_ST: visitIdent: tree = R
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = R
   [enerjc] *** EXPAX_ST: (visitSelect) fieldAccessFlag DECREASE = 0(node=enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false).nextDouble)
   [enerjc] *** EXPAX_ST: check oldLhs = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()]
   [enerjc] *** EXPAX_APPROX_COUNT: ENERJ(ASSIGN) - enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)[enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false).intValue()] = (double)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false).nextDouble()
   [enerjc] *** EXPAX_ST: visitIdent: tree = A
   [enerjc] *** EXPAX_ST: call isApprox - visitIdent #2
   [enerjc] *** EXPAX_ST: ENERJ
   [enerjc] *** EXPAX_PRT: approx is false = IDENT
   [enerjc] *** EXPAX_PRT: approx is false = A
   [enerjc] *** EXPAX_GEN: class name is changed to = jnt.scimark2.kernel
   [enerjc] *** EXPAX_RPT: method name is changed to = main(java.lang.String[])
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 484
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = kernel()
   [enerjc] *** EXPAX_GEN: return type = void
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public <init>() {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = <init>
   [enerjc] *** EXPAX_GEN: flatname = <init>
   [enerjc] *** EXPAX_GEN: qname = <init>
   [enerjc] *** EXPAX_GEN: sname<init>
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to <init>()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     super();
   [enerjc]     enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = super();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super()
   [enerjc] *** EXPAX_GEN: visitApply = super()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = super
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 0
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel <init>() void 0 51 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel <init>() void 1 51 IDENT
   [enerjc] *** EXPAX_AST: tree = super
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 4
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor(this)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel <init>() void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel <init>() void 4 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel <init>() void 7 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.enterConstructor
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = this
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 7
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#0
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel <init>() void 7 0 IDENT
   [enerjc] *** EXPAX_AST: tree = this
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] public static double measureSparseMatmult(int N, int nz, double min_time, Random R) {
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true);
   [enerjc]     enerj.rt.Reference nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true);
   [enerjc]     enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] x = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false);
   [enerjc]     @Approx()
   [enerjc]     double[] y = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false);
   [enerjc]     int nr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference nr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true);
   [enerjc]     int anz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference anz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] val = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false);
   [enerjc]     int[] col = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false);
   [enerjc]     int[] row = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue();
   [enerjc]     for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true);
   [enerjc]         ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]         int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true);
   [enerjc]         if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc]         for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     }
   [enerjc]     int cycles = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference cycles__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true);
   [enerjc]     SparseCompRow.matmult((double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue());
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print("SparseMatMult vector: ");
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc]     }
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println("");
   [enerjc]     return 0.0;
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 15
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] public static double measureSparseMatmult(int N, int nz, double min_time, Random R) {
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true);
   [enerjc]     enerj.rt.Reference nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true);
   [enerjc]     enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] x = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false);
   [enerjc]     @Approx()
   [enerjc]     double[] y = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false);
   [enerjc]     int nr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference nr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true);
   [enerjc]     int anz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference anz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] val = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false);
   [enerjc]     int[] col = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false);
   [enerjc]     int[] row = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue();
   [enerjc]     for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true);
   [enerjc]         ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]         int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true);
   [enerjc]         if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc]         for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     }
   [enerjc]     int cycles = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference cycles__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true);
   [enerjc]     SparseCompRow.matmult((double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue());
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print("SparseMatMult vector: ");
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc]     }
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println("");
   [enerjc]     return 0.0;
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = measureSparseMatmult(int,int,double,jnt.scimark2.Random)
   [enerjc] *** EXPAX_GEN: return type = double
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] public static double measureSparseMatmult(int N, int nz, double min_time, Random R) {
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true);
   [enerjc]     enerj.rt.Reference nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true);
   [enerjc]     enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] x = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false);
   [enerjc]     @Approx()
   [enerjc]     double[] y = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false);
   [enerjc]     int nr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference nr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true);
   [enerjc]     int anz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference anz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] val = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false);
   [enerjc]     int[] col = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false);
   [enerjc]     int[] row = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue();
   [enerjc]     for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true);
   [enerjc]         ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]         int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true);
   [enerjc]         if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc]         for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     }
   [enerjc]     int cycles = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference cycles__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true);
   [enerjc]     SparseCompRow.matmult((double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue());
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print("SparseMatMult vector: ");
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc]     }
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println("");
   [enerjc]     return 0.0;
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = measureSparseMatmult
   [enerjc] *** EXPAX_GEN: flatname = measureSparseMatmult
   [enerjc] *** EXPAX_GEN: qname = measureSparseMatmult
   [enerjc] *** EXPAX_GEN: snamemeasureSparseMatmult
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to measureSparseMatmult(int,int,double,jnt.scimark2.Random)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true);
   [enerjc]     enerj.rt.Reference nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true);
   [enerjc]     enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] x = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false);
   [enerjc]     @Approx()
   [enerjc]     double[] y = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false);
   [enerjc]     int nr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference nr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true);
   [enerjc]     int anz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference anz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] val = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false);
   [enerjc]     int[] col = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false);
   [enerjc]     int[] row = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue();
   [enerjc]     for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true);
   [enerjc]         ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]         int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true);
   [enerjc]         if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc]         for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     }
   [enerjc]     int cycles = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference cycles__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true);
   [enerjc]     SparseCompRow.matmult((double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue());
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print("SparseMatMult vector: ");
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc]     }
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println("");
   [enerjc]     return 0.0;
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true);
   [enerjc]     enerj.rt.Reference nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true);
   [enerjc]     enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] x = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false);
   [enerjc]     @Approx()
   [enerjc]     double[] y = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false);
   [enerjc]     int nr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference nr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true);
   [enerjc]     int anz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference anz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] val = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false);
   [enerjc]     int[] col = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false);
   [enerjc]     int[] row = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue();
   [enerjc]     for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true);
   [enerjc]         ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]         int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]         enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true);
   [enerjc]         if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc]         for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     }
   [enerjc]     int cycles = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference cycles__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true);
   [enerjc]     SparseCompRow.matmult((double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue());
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print("SparseMatMult vector: ");
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]         ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc]     }
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println("");
   [enerjc]     return 0.0;
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 0 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = R
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = R
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 4 0 IDENT
   [enerjc] *** EXPAX_AST: tree = R
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 11 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 13
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 13 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf(min_time)
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf(min_time)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 17
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 17 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 17 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = min_time
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = min_time
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 17
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 17 0 IDENT
   [enerjc] *** EXPAX_AST: tree = min_time
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 26 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference min_time__REF__ = new <java.lang.Double>enerj.rt.Reference(Double.valueOf(min_time), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 28
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 28 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(nz)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(nz)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 32
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 32 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 32 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = nz
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = nz
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 32
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 32 0 IDENT
   [enerjc] *** EXPAX_AST: tree = nz
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 41 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference nz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nz), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 43
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 43 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(N)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(N)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 47
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 47 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 47 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 47
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 47 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 56 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] double[] x = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 58
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] double[] x = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 58 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 58 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 58
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 58
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 58 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 58 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 61 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false))
   [enerjc] *** EXPAX_GEN: visitApply = RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = RandomVector
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = RandomVector
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 61
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#3
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 61 178 IDENT
   [enerjc] *** EXPAX_AST: tree = RandomVector
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 61
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 61 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 61
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 61
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 61 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 61 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 64 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 64
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 64 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 75 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 78 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 78
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 78
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 78 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 78 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 81 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = R__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = R__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 81
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 81 0 IDENT
   [enerjc] *** EXPAX_AST: tree = R__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 96
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 96 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 96 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 110 172 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] double[] x = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 112
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 112 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = x
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = x
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 116
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 116 0 IDENT
   [enerjc] *** EXPAX_AST: tree = x
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 123 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] enerj.rt.Reference x__REF__ = new <double[]>enerj.rt.Reference(x, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] double[] y = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 125
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] double[] y = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 125 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 125 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 125
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 125
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 125 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 125 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 128 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 128
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 128
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 128 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 128 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 131 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()]
   [enerjc] *** EXPAX_GEN: visitNewArray = new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()]
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWARRAY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 131
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 131 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 131
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 131
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 131 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 131 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 134 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 134
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 134 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 145 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewArray#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 148 221 NEWARRAY
   [enerjc] *** EXPAX_AST: tree = new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()]
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 8
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 161
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 161 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 161 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 175 215 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] double[] y = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 177
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 177 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = y
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = y
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 181
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 181 0 IDENT
   [enerjc] *** EXPAX_AST: tree = y
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 188 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] enerj.rt.Reference y__REF__ = new <double[]>enerj.rt.Reference(y, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int nr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 190
   [enerjc] *** EXPAX_GEN: visitVarDef = int nr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 190 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 190
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 190 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 190
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 190
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 190 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 190 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 193 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 193 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 193
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 193 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 193 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 193
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 193
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 193
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 193 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 193 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 196 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 196
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 196 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 196 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 196
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 196 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 196
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 196
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 196 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 196 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 199 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = nz__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = nz__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 199
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 199 0 IDENT
   [enerjc] *** EXPAX_AST: tree = nz__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 210 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 216
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 216 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 216 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 216
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 216 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 216
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 216
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 216 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 216 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 219 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 219
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 219 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 230 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 236
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 236 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 236 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 239
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 239 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 239 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 248 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 255
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 255 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 255 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 266 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 269 244 VARDEF
   [enerjc] *** EXPAX_AST: tree = int nr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nz__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference nr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 271
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference nr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 271 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(nr)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(nr)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 275
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 275 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 275 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = nr
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = nr
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 275
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 275 0 IDENT
   [enerjc] *** EXPAX_AST: tree = nr
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 285 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference nr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(nr), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int anz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 287
   [enerjc] *** EXPAX_GEN: visitVarDef = int anz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 287 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 287
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 287 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 287
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 287
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 290 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 290 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 290
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 290 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 290 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 290
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 290
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 290
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 290 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 290 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 293 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 293
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 293 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 293 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 293
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 293 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 293
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 293
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 293 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 293 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 296 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = nr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = nr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 296
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 296 0 IDENT
   [enerjc] *** EXPAX_AST: tree = nr__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 307 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 313
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 313 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 313 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 313
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 313 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 313
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 313
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 313 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 313 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 316 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 316
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 316 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 333
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 333 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 333 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 336
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 336 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 336 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 345 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 352
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 352 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 363 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 366 301 VARDEF
   [enerjc] *** EXPAX_AST: tree = int anz = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference anz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 368
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference anz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 368 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(anz)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(anz)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 372
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 372 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 372 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = anz
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = anz
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 372
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 372 0 IDENT
   [enerjc] *** EXPAX_AST: tree = anz
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 382 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference anz__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(anz), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] double[] val = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 384
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] double[] val = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 384 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 384 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 384
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 384
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 384 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 384 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 387 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false))
   [enerjc] *** EXPAX_GEN: visitApply = RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = RandomVector
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = RandomVector
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 387
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#3
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 387 374 IDENT
   [enerjc] *** EXPAX_AST: tree = RandomVector
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 387
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 387 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 387
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 387
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 387 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 387 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 390 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = anz__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = anz__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 390
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 390 0 IDENT
   [enerjc] *** EXPAX_AST: tree = anz__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 401 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 404 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 404
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 404
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 404 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 407 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = R__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = R__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 407
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 407 0 IDENT
   [enerjc] *** EXPAX_AST: tree = R__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 422
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 422 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 422 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 436 366 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] double[] val = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(RandomVector(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue(), (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 438
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 438 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = val
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = val
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 442
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 442 0 IDENT
   [enerjc] *** EXPAX_AST: tree = val
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 449 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] enerj.rt.Reference val__REF__ = new <double[]>enerj.rt.Reference(val, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int[] col = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 451
   [enerjc] *** EXPAX_GEN: visitVarDef = int[] col = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 451 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 451 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 451
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 451
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 451 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 451 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 454 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 454
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 454
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 454 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 454 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 457 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()]
   [enerjc] *** EXPAX_GEN: visitNewArray = new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()]
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWARRAY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 457
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 457 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 457
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 457
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 457 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 457 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 460 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = anz__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = anz__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 460
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 460 0 IDENT
   [enerjc] *** EXPAX_AST: tree = anz__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 471 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewArray#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 474 410 NEWARRAY
   [enerjc] *** EXPAX_AST: tree = new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()]
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 4
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 486
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 486 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 486 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 500 402 VARDEF
   [enerjc] *** EXPAX_AST: tree = int[] col = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(anz__REF__, false)).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 502
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 502 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = col
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = col
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 506
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 506 0 IDENT
   [enerjc] *** EXPAX_AST: tree = col
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 513 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference col__REF__ = new <int[]>enerj.rt.Reference(col, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int[] row = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 515
   [enerjc] *** EXPAX_GEN: visitVarDef = int[] row = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 515 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 515 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 515
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 515
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 515 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 515 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 518 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 518
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 518
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 518 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 518 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 521 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_GEN: visitNewArray = new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWARRAY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 521
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 521
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 521
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 521 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 521 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 524 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 524
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 524 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 524 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 524
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 524 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 524
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 524
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 524 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 524 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 527 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 527
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 527 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 538 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 544
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 544 448 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 544 448 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 548
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 548 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 548 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 551
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 551 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 551 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 560 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewArray#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 563 438 NEWARRAY
   [enerjc] *** EXPAX_AST: tree = new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()]
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 4
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 575
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 575 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 575 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 589 430 VARDEF
   [enerjc] *** EXPAX_AST: tree = int[] row = (int[])(int[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new int[enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()], 1, false, 4, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 591
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 591 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = row
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = row
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 595
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 595 0 IDENT
   [enerjc] *** EXPAX_AST: tree = row
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 602 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference row__REF__ = new <int[]>enerj.rt.Reference(row, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 604
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 604
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 604 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 604
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 604
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 604 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 604 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 607 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 607
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 607
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 607 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 607 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 610 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 610
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 610 0 IDENT
   [enerjc] *** EXPAX_AST: tree = row__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 620
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 620 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 620 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)0
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 632 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), 0, false, Integer.valueOf((int)0))).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]     int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 636
   [enerjc] *** EXPAX_GEN: visitForLoop = for (int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]     int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 636
   [enerjc] *** EXPAX_GEN: visitVarDef = int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 636 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 636
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 636 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 636
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 636
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 636 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 636 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 639 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 639 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 639
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 639 481 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 639 481 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 644
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 644 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 644 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 655 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 658 479 VARDEF
   [enerjc] *** EXPAX_AST: tree = int r = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 660
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 660 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(r)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(r)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 664
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 664 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 664 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 664
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 664 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 674 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference r__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(r), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 676
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 676 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 676
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 676
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 676 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 676 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 679 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 679
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 679 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 679 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 679
   [enerjc] *** EXPAX_GEN: tree.getTag() = LT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 679
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 679 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 679
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 679
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 679 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 679 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 682 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 682
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 682 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 693 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 696
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 696 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 696
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 696
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 696 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 696 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 699 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 699
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 699 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 710 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 713 485 LT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 732 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 738
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true);
   [enerjc]     ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc]     int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue();
   [enerjc]     enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true);
   [enerjc]     if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 738
   [enerjc] *** EXPAX_GEN: visitVarDef = int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 738 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 738
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 738 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 738
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 738
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 738 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 738 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 741 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 741 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 741
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 741 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 741 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 741
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 741 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 741
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 741
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 741 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 741 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 744 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 744
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 744
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 744 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 744 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 747 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 747
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 747 0 IDENT
   [enerjc] *** EXPAX_AST: tree = row__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 755
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 755 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 755
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 755
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 755 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 755 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 758 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 758
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 758 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 769 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 781 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 788
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 788 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 788 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 799 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 802 541 VARDEF
   [enerjc] *** EXPAX_AST: tree = int rowr = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue(), false)).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 804
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 804 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(rowr)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(rowr)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 808
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 808 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 808 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = rowr
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = rowr
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 808
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 808 0 IDENT
   [enerjc] *** EXPAX_AST: tree = rowr
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 818 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference rowr__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(rowr), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 820
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 820
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 820 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 820
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 820
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 820 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 820 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 823 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 823
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 823
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 823 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 823 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 826 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 826
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 826 0 IDENT
   [enerjc] *** EXPAX_AST: tree = row__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 834
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 834
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 834
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 834 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 834 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 837 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 837
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 837 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 837 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 837
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 837 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 837
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 837
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 837 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 837 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 840 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 840
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 840 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 851 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 857
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 857 565 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 857 565 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 861
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 861 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 861 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 864
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 864 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 864 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 873 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 877
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 877 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 877 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 877 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 877
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 877
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 877
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 877 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 877 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 880 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 880
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 880 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 880 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 880
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 880 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 880
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 880
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 880 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 880 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 883 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = rowr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = rowr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 883
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 883 0 IDENT
   [enerjc] *** EXPAX_AST: tree = rowr__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 894 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 900
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 900 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 900 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 900
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 900 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 900
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 900
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 900 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 900 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 903 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = nr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = nr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 903
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 903 0 IDENT
   [enerjc] *** EXPAX_AST: tree = nr__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 914 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 920
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 920 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 920 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 923
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 923 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 923 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 932 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 946 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(1), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 950
   [enerjc] *** EXPAX_GEN: visitVarDef = int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 950 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 950
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 950 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 950
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 950
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 950 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 950 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 953 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 953 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 953
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 953 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 953 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 953
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 953
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 953
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 953 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 953 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 956 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 956
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 956 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 956 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 956
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 956 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 956
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 956
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 956 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 956 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 959 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 959
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 959 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 970 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 976
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 976 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 976 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 976
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 976 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 976
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 976
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 976 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 976 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 979 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = nr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = nr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 979
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 979 0 IDENT
   [enerjc] *** EXPAX_AST: tree = nr__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 990 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 996
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 996 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 996 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 999
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 999 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 999 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1008 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1015
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1015 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1015 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1026 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1029 588 VARDEF
   [enerjc] *** EXPAX_AST: tree = int step = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(r__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.DIVIDE, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1031
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1031 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(step)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(step)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1035
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1035 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1035 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = step
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = step
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1035
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1035 0 IDENT
   [enerjc] *** EXPAX_AST: tree = step
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1045 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference step__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(step), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1047
   [enerjc] *** EXPAX_GEN: visitIf = if (((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()) enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc] *** EXPAX_GEN: tree.getTag() = IF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1047
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1047 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1047
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1047
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1047 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1047 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1050 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1)
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1050
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1050 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1050 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 1050
   [enerjc] *** EXPAX_GEN: tree.getTag() = LT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1050
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1050 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1050
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1050
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1050 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1050 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1053 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = step__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = step__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1053
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1053 0 IDENT
   [enerjc] *** EXPAX_AST: tree = step__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1064 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1068 614 LT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1087 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue() < 1))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1093
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1));
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeLocal(step__REF__, false, Integer.valueOf((int)1))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1093
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1093
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1093 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1093 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1096 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = step__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = step__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1096
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1096 0 IDENT
   [enerjc] *** EXPAX_AST: tree = step__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1099
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1099 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1099 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)1
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1112
   [enerjc] *** EXPAX_GEN: visitForLoop = for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1112
   [enerjc] *** EXPAX_GEN: visitVarDef = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1109 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1109
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1109 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1109
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1109
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1109 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1109 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1112 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1112 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1112
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1112 679 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1112 679 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1117
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1117 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1117 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1128 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1131 677 VARDEF
   [enerjc] *** EXPAX_AST: tree = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1133
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1133 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(i)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(i)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1137
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1137 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1137 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1137
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1137 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1147 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1149
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1149 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1149
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1149
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1149 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1149 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1152 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1152
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1152 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1152 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 1152
   [enerjc] *** EXPAX_GEN: tree.getTag() = LT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1152
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1152 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1152
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1152
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1152 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1152 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1155 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1155
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1155 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1166 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1169
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1169 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1169
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1169
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1169 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1169 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1172 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = nr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = nr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1172
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1172 0 IDENT
   [enerjc] *** EXPAX_AST: tree = nr__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1183 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1186 683 LT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1205 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(nr__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1211
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1211 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1211
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1211 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1214 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1214
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1214
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1214 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1214 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1217 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = col__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = col__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1217
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1217 0 IDENT
   [enerjc] *** EXPAX_AST: tree = col__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1225
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1225
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1225
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1225 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1225 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1228 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1228
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1228 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1228 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1228
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1228 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1228
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1228
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1228 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1228 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1231 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = rowr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = rowr__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1231
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1231 0 IDENT
   [enerjc] *** EXPAX_AST: tree = rowr__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1242 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1248
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1248 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1248 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1248
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1248 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1248
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1248
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1248 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1248 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1251 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1251
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1251 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1262 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1268
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1268 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1268 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1271
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1271 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1271 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1280 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1284
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1284 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1284 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1284 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1284
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1284
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1284
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1284 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1284 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1287
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1287
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1287 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1287
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1287
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1287 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1290 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1290
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1290 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1301 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1307
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1307 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1307 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1307
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1307 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1307
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1307
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1307 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1307 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1310 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = step__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = step__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1310
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1310 0 IDENT
   [enerjc] *** EXPAX_AST: tree = step__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1321 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1327
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1327 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1330
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1330 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1330 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1339 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1353 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(rowr__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.PLUS, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue(), false, Integer.valueOf((int)enerj.rt.PrecisionRuntimeRoot.impl.binaryOp(Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()), Integer.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(step__REF__, false)).intValue()), enerj.rt.PrecisionRuntime$ArithOperator.MULTIPLY, enerj.rt.PrecisionRuntime$NumberKind.INT, false).intValue()))).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1357
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1357
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1357
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1357 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1357 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1360 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1360
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1360 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1362
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1362 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1362 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1365
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1365 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1365 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1370
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1370 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1370 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1383
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(r__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1383
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1383
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1383 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1383 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1386 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = r__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1386
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1386 0 IDENT
   [enerjc] *** EXPAX_AST: tree = r__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1388
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1388 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1388 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1391
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1391 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1391 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1396
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1396 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1396 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int cycles = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1409
   [enerjc] *** EXPAX_GEN: visitVarDef = int cycles = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1409 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1409
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1409 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1409
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1409
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1409 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1409 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1412 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(100)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(100)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1412 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(100)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(100)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(100)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1412
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1412 737 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1412 737 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 100
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1418
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1418 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1418 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1429 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1432 730 VARDEF
   [enerjc] *** EXPAX_AST: tree = int cycles = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(100), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference cycles__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1434
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference cycles__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1434 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(cycles)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(cycles)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1438
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1438 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1438 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = cycles
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = cycles
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1438
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1438 0 IDENT
   [enerjc] *** EXPAX_AST: tree = cycles
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1448 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference cycles__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(cycles), false, true)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = SparseCompRow.matmult((double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue());
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1450
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = SparseCompRow.matmult((double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue());
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = SparseCompRow.matmult((double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = SparseCompRow.matmult((double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false), (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false), (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = SparseCompRow.matmult
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = SparseCompRow.matmult
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1450
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1450 757 SELECT
   [enerjc] *** EXPAX_AST: tree = SparseCompRow.matmult
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1450 757 SELECT
   [enerjc] *** EXPAX_AST: tree = SparseCompRow.matmult
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1450 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1450
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1450
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1450 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1450 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1453 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = y__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = y__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1453
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1453 0 IDENT
   [enerjc] *** EXPAX_AST: tree = y__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1464 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(val__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1464
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1464
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1464 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1464 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1467 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = val__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = val__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1467
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1467 0 IDENT
   [enerjc] *** EXPAX_AST: tree = val__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1478 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(row__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1478
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1478
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1478 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1478 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1481 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = row__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1481
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1481 0 IDENT
   [enerjc] *** EXPAX_AST: tree = row__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1492 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int[])enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<int[]>loadLocal(col__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1492
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1492
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1492 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1492 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1495 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = col__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = col__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1495
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1495 0 IDENT
   [enerjc] *** EXPAX_AST: tree = col__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1506 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(x__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1506
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1506
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1506 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1506 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1509 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = x__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = x__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1509
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1509 0 IDENT
   [enerjc] *** EXPAX_AST: tree = x__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1520
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1520 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1520
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1520
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1520 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1520 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1523 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = cycles__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = cycles__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1523
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1523 0 IDENT
   [enerjc] *** EXPAX_AST: tree = cycles__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1534 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(cycles__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print("SparseMatMult vector: ");
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1540
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print("SparseMatMult vector: ");
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print("SparseMatMult vector: ")
   [enerjc] *** EXPAX_GEN: visitApply = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print("SparseMatMult vector: ")
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1540
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1540 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1540
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1540
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1540 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1540 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1543 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = System.class
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = System.class
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1543
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1546 799 SELECT
   [enerjc] *** EXPAX_AST: tree = System.class
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "out"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1557 809 SELECT
   [enerjc] *** EXPAX_AST: tree = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "SparseMatMult vector: "
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1562
   [enerjc] *** EXPAX_GEN: visitForLoop = for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) {
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1562
   [enerjc] *** EXPAX_GEN: visitVarDef = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1562 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1562
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1562 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1562
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1562
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1562 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1562 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1565 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1565 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1565
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1565 858 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1565 858 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1570
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1570 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1570 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1581 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1584 854 VARDEF
   [enerjc] *** EXPAX_AST: tree = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1586
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1586 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(i)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(i)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1590
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1590 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1590 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1590
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1590 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1600 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1602
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1602 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1602
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1602
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1602 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1602 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1605 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1605
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1605 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1605 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 1605
   [enerjc] *** EXPAX_GEN: tree.getTag() = LT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1605
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1605 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1605
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1605
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1605 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1605 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1608 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1608
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1608 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1619 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1622
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1622 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1622
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1622
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1622 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1622 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1625 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1625
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1625 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1636 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1639 863 LT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1658 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1664
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1664
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ");
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ")
   [enerjc] *** EXPAX_GEN: visitApply = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print(Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " ")
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1664
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1664 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1664
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1664
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1664 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1664 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1667 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = System.class
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = System.class
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1667
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1670 878 SELECT
   [enerjc] *** EXPAX_AST: tree = System.class
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "out"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1681 888 SELECT
   [enerjc] *** EXPAX_AST: tree = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).print
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " "
   [enerjc] *** EXPAX_GEN: visitBinary = Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()) + " "
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 1681
   [enerjc] *** EXPAX_GEN: tree.getTag() = PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue())
   [enerjc] *** EXPAX_GEN: visitApply = Endorsements.endorse(((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Endorsements.endorse
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Endorsements.endorse
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1688
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1688 907 SELECT
   [enerjc] *** EXPAX_AST: tree = Endorsements.endorse
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1688 907 SELECT
   [enerjc] *** EXPAX_AST: tree = Endorsements.endorse
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1688
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1688 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1688
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1688
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1688 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1688 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1691 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1691
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1691
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1691 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1691 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1694 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = y__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = y__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1694
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1694 0 IDENT
   [enerjc] *** EXPAX_AST: tree = y__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1702
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1702 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1702
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1702
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1702 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1702 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1705 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1705
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1705 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1716 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1728 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>loadArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(y__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), false)).doubleValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = " "
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1748
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), false, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1748
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1748
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1748 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1748 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1751 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 1751
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1751 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1753
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1753 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1753 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1756
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1756 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1756 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1761
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1761 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1761 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println("");
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1774
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println("");
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println("")
   [enerjc] *** EXPAX_GEN: visitApply = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println("")
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1774
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1774 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1774
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1774
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1774 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1774 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1777 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadField
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = System.class
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = System.class
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 1777
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#1
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1780 936 SELECT
   [enerjc] *** EXPAX_AST: tree = System.class
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = "out"
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel measureSparseMatmult(int,int,double,jnt.scimark2.Random) double 1791 946 SELECT
   [enerjc] *** EXPAX_AST: tree = ((.java.io.PrintStream)enerj.rt.PrecisionRuntimeRoot.impl.<.java.io.PrintStream>loadField(System.class, "out", false)).println
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ""
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = return 0.0;
   [enerjc] *** EXPAX_GEN: tree.getTag() = RETURN
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1796
   [enerjc] *** EXPAX_GEN: visitReturn = return 0.0;
   [enerjc] *** EXPAX_GEN: tree.getTag() = RETURN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0.0
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = 
   [enerjc] @Approx()
   [enerjc] private static double[] RandomVector(int N, Random R) {
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] A = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference A__REF__ = new <double[]>enerj.rt.Reference(A, false, false);
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue();
   [enerjc]     return (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 1798
   [enerjc] *** EXPAX_GEN: visitMethodDef - tree.toString() = 
   [enerjc] @Approx()
   [enerjc] private static double[] RandomVector(int N, Random R) {
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] A = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference A__REF__ = new <double[]>enerj.rt.Reference(A, false, false);
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue();
   [enerjc]     return (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name = RandomVector(int,jnt.scimark2.Random)
   [enerjc] *** EXPAX_GEN: return type = double[]
   [enerjc] *** EXPAX_GEN: tree = 
   [enerjc] @Approx()
   [enerjc] private static double[] RandomVector(int N, Random R) {
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] A = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference A__REF__ = new <double[]>enerj.rt.Reference(A, false, false);
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue();
   [enerjc]     return (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getName() = RandomVector
   [enerjc] *** EXPAX_GEN: flatname = RandomVector
   [enerjc] *** EXPAX_GEN: qname = RandomVector
   [enerjc] *** EXPAX_GEN: snameRandomVector
   [enerjc] *** EXPAX_GEN: tree.getTag() = METHODDEF
   [enerjc] *** EXPAX_GEN: method name is changed to RandomVector(int,jnt.scimark2.Random)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = {
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] A = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference A__REF__ = new <double[]>enerj.rt.Reference(A, false, false);
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue();
   [enerjc]     return (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitBlock = {
   [enerjc]     enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false);
   [enerjc]     enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true);
   [enerjc]     @Approx()
   [enerjc]     double[] A = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE);
   [enerjc]     @Approx()
   [enerjc]     enerj.rt.Reference A__REF__ = new <double[]>enerj.rt.Reference(A, false, false);
   [enerjc]     for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue();
   [enerjc]     return (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false);
   [enerjc] }
   [enerjc] *** EXPAX_GEN: tree.getTag() = BLOCK
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 0
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 0 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = R
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = R
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 4
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 4 0 IDENT
   [enerjc] *** EXPAX_AST: tree = R
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 10 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference R__REF__ = new <Random>enerj.rt.Reference(R, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 11
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 11 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(N)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(N)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 15
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 15 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 15 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 15
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 15 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuilder.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/AbstractStringBuilder.class)]]
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 24 0 VARDEF
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/CharSequence.class)]]
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference N__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(N), false, true)
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/StringBuffer.class)]]
   [enerjc] [loading ZipFileIndexFileObject[/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class)]]
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] double[] A = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 25
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] double[] A = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 25 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 25 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 25
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 25
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 25 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 25 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 28 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 28
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 28
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 28 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 28 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.newArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()]
   [enerjc] *** EXPAX_GEN: visitNewArray = new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()]
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWARRAY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 31 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 31
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 31 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 34 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 34
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 34 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 44 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewArray#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 47 1067 NEWARRAY
   [enerjc] *** EXPAX_AST: tree = new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()]
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 8
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 60
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 60 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 60 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 74 1061 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] double[] A = (double[])(double[])enerj.rt.PrecisionRuntimeRoot.impl.storeValue(enerj.rt.PrecisionRuntimeRoot.impl.newArray(new double[((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()], 1, false, 8, 0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = @Approx()
   [enerjc] enerj.rt.Reference A__REF__ = new <double[]>enerj.rt.Reference(A, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 76
   [enerjc] *** EXPAX_GEN: visitVarDef = @Approx()
   [enerjc] enerj.rt.Reference A__REF__ = new <double[]>enerj.rt.Reference(A, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <double[]>enerj.rt.Reference(A, false, false)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <double[]>enerj.rt.Reference(A, false, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 76 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <double[]>enerj.rt.Reference(A, false, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = A
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = A
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 80
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 80 0 IDENT
   [enerjc] *** EXPAX_AST: tree = A
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 87 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = @Approx()
   [enerjc] enerj.rt.Reference A__REF__ = new <double[]>enerj.rt.Reference(A, false, false)
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 89
   [enerjc] *** EXPAX_GEN: visitForLoop = for (int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue(), i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true); ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue(); enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)) ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = FORLOOP
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 89
   [enerjc] *** EXPAX_GEN: visitVarDef = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 89 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 89
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 89 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 89
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 89
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 89 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 89 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 92 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 92 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (java.lang.Integer)Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(0)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 92
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 92 1097 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 92 1097 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 0
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 97
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 97 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 97 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$MemKind.VARIABLE
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 108 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 111 1095 VARDEF
   [enerjc] *** EXPAX_AST: tree = int i = (int)((Integer)enerj.rt.PrecisionRuntimeRoot.impl.storeValue((java.lang.Integer)Integer.valueOf(0), false, enerj.rt.PrecisionRuntime$MemKind.VARIABLE)).intValue()
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 113
   [enerjc] *** EXPAX_GEN: visitVarDef = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = VARDEF
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: visitNewClass = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: tree.getTag() = NEWCLASS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitNewClass
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 113 0 NEWCLASS
   [enerjc] *** EXPAX_AST: tree = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(i)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(i)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 117
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 117 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 117 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 117
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 117 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitVarDef
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 127 0 VARDEF
   [enerjc] *** EXPAX_AST: tree = enerj.rt.Reference i__REF__ = new <java.lang.Integer>enerj.rt.Reference(Integer.valueOf(i), false, true)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 129
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 129 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 129
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 129
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 129 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 129 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 132 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: visitApply = Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 132
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 132 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 132 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Boolean.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitBinary (bytecode offset) = 132
   [enerjc] *** EXPAX_GEN: tree.getTag() = LT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 132
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 132 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 132
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 132
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 132 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 132 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 135 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 135
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 135 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 146 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 149
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 149 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 149
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 149
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 149 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 149 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 152 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = N__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 152
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 152 0 IDENT
   [enerjc] *** EXPAX_AST: tree = N__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 162 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at completeBinop
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 165 1101 LT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 184 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Boolean)enerj.rt.PrecisionRuntimeRoot.impl.countLogicalOp(Boolean.valueOf(((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue() < ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(N__REF__, false)).intValue()))).booleanValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 190
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue();
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 190
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 190 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 190
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 190
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 190 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 190 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 193 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.storeArray
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 193
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 193
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 193 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 193 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 196 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = A__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = A__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 196
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 196 0 IDENT
   [enerjc] *** EXPAX_AST: tree = A__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: visitApply = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 204
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 204 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 204
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 204
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 204 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 204 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 207 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 207
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 207 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 218 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble())
   [enerjc] *** EXPAX_GEN: visitApply = Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble())
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Double.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 222
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 222 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 222 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Double.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 222 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()
   [enerjc] *** EXPAX_GEN: visitApply = ((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = ((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = ((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 222
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 222 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 222
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 222
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 222 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 222 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 225 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = R__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = R__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 225
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 225 0 IDENT
   [enerjc] *** EXPAX_AST: tree = R__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 235 1121 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 249 0 SELECT
   [enerjc] *** EXPAX_AST: tree = ((Double)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Double>storeArray(enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false), ((Integer)enerj.rt.PrecisionRuntimeRoot.impl.<java.lang.Integer>loadLocal(i__REF__, false)).intValue(), true, Double.valueOf((double)((Random)enerj.rt.PrecisionRuntimeRoot.impl.<.jnt.scimark2.Random>loadLocal(R__REF__, false)).nextDouble()))).doubleValue
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 253
   [enerjc] *** EXPAX_GEN: visitExec - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = EXEC
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal(i__REF__, enerj.rt.PrecisionRuntime$ArithOperator.PLUS, Integer.valueOf(1), true, enerj.rt.PrecisionRuntime$NumberKind.INT, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 253
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 253
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 253 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 253 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 256 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.assignopLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = i__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 256
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 256 0 IDENT
   [enerjc] *** EXPAX_AST: tree = i__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 258
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 258 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 258 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$ArithOperator.PLUS
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: visitApply = Integer.valueOf(1)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = Integer.valueOf
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 261
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 261 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 261 0 SELECT
   [enerjc] *** EXPAX_AST: tree = Integer.valueOf
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = 1
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = true
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 266
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 266 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 266 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntime$NumberKind.INT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] *** EXPAX_GEN: genDef - tree.toString() = return (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = RETURN
   [enerjc] *** EXPAX_GEN: genDef - code.bytecodeOffset = 279
   [enerjc] *** EXPAX_GEN: visitReturn = return (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false);
   [enerjc] *** EXPAX_GEN: tree.getTag() = RETURN
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)
   [enerjc] *** EXPAX_GEN: visitTypeCast - tree.toString() = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitTypeCast
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 279 0 TYPECAST
   [enerjc] *** EXPAX_AST: tree = (double[])enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)
   [enerjc] *** EXPAX_GEN: visitApply = enerj.rt.PrecisionRuntimeRoot.impl.<double[]>loadLocal(A__REF__, false)
   [enerjc] *** EXPAX_GEN: tree.getTag() = APPLY
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 279
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect - tree.toString() = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: visitSelect (bytecode offset) = 279
   [enerjc] *** EXPAX_GEN: tree.getTag() = SELECT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 279 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#4
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 279 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitSelect#6
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 282 0 SELECT
   [enerjc] *** EXPAX_AST: tree = enerj.rt.PrecisionRuntimeRoot.impl.loadLocal
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = A__REF__
   [enerjc] *** EXPAX_GEN: visitIdent - tree.toString() = A__REF__
   [enerjc] *** EXPAX_GEN: visitIdent (bytecode offset) = 282
   [enerjc] *** EXPAX_GEN: tree.getTag() = IDENT
   [enerjc] *** EXPAX_GEN: call expaxInfo.add at visitIdent#2
   [enerjc] *** EXPAX_AST: add to expaxInfo = jnt.scimark2.kernel RandomVector(int,jnt.scimark2.Random) double[] 282 0 IDENT
   [enerjc] *** EXPAX_AST: tree = A__REF__
   [enerjc] *** EXPAX_GEN: genExpr - tree.toString() = false
   [enerjc] [wrote RegularFileObject[/Users/jspark/projects/expax/apps/smm-enerj/build/jnt/scimark2/kernel.class]]
   [enerjc] [total 2421ms]
      [jar] Building jar: /Users/jspark/projects/expax/apps/smm-enerj/smm.jar

BUILD SUCCESSFUL
Total time: 2 seconds
